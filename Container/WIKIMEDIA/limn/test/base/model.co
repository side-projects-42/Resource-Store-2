limn = require 'limn'
Model = limn.base.Model


QUnit.module '[base] Model', do
    setup: ->
    teardown: ->


test 'create empty, serialize', ->
    emptyModel = new Model()
    serialized = JSON.stringify(emptyModel)
    strictEqual serialized, "{}", 'empty JSON object'

test 'initialize with a plain object, serialize', ->
    modelFromObject = new Model(basicObject)
    serialized = JSON.stringify(modelFromObject)
    strictEqual serialized, basicJSON, 'JSON representation of the plain object'

test 'create from JSON, modify, serialize', ->
    modelFromObject = new Model(basicObject)
    modelFromObject.set 'name', 'mathematics class'
    serialized = JSON.stringify modelFromObject
    strictEqual serialized, '{"name":"mathematics class","room":"1A"}', 'the JSON changes as expected'

test 'create from JSON, modify without Model::set, serialize', ->
    modelFromObject = new Model(basicObject)
    modelFromObject.name 'mathematics class'
    serialized = JSON.stringify modelFromObject
    strictEqual serialized, '{"name":"mathematics class","room":"1A"}', 'the JSON changes as expected'

test 'create empty, add observables to the instance, serialize', ->
    modelFromEmtpy = new Model()
    modelFromEmtpy.name = ko.observable 'dan'
    modelFromEmtpy.description = ko.observable 'person'
    serialized = JSON.stringify modelFromEmtpy
    strictEqual serialized, '{}', 'the JSON does not contain the new observables'

test 'create empty, add attributes, serialize', ->
    modelFromEmpty = new Model()
    modelFromEmpty.set 'name', 'dan'
    modelFromEmpty.set 'description', 'person'
    serialized = JSON.stringify modelFromEmpty
    strictEqual serialized, '{"name":"dan","description":"person"}', 'the JSON contains the added attributes'


/******** Inheriting Model ********/
QUnit.module '[base] Inheriting Model', do
    setup: ->
    teardown: ->

test 'create empty', ->
    person = new Person()
    strictEqual person.get('name'), '', 'string attribute default is set'
    strictEqual person.get('age'), 18, 'int attribute default is set'
    strictEqual person.name(), '', 'string default copied to object'
    strictEqual person.age(), 18, 'int default copied to object'

test 'create from object with non-default values', ->
    old = (new Date()).getFullYear() - 1981
    person = new Person({name:'Dan',age:old})
    strictEqual person.name(), 'Dan', 'string default ignored'
    strictEqual person.age(), old, 'int default ignored'


/******** Typed Model ********/
QUnit.module '[base] Inheriting Model: Typed Attributes'

test 'typed property', ->
    classroom = new Classroom()
    strictEqual classroom.teacher(), null, 'complex property not initialized'
    
    ok classroom.teacher({}), 'typed property accepts plain object'
    ok classroom.teacher() instanceof Person, 'typed property casts plain object to model type'
    strictEqual classroom.teacher().age(), 18, 'typed property cast from plain object has correct defaults'
    strictEqual classroom.get('teacher').get('age'), 18, 'typed property cast from plain object getters identical to attrs'
    
    ok classroom.teacher(teacher = new Person()), 'typed property accepts new model instance'
    strictEqual classroom.teacher(), teacher, 'typed property given new model instance retains identity'

test 'typed array', ->
    classroom = new Classroom()
    ok Array.isArray classroom.students(), 'typed array initialized with array'
    
    ok i = classroom.students.push({}), 'typed array accepts plain object'
    ok classroom.get('students')[i-1] instanceof Person, 'typed array casts plain object to model type'
    
    ok i = classroom.students.push(student = new Person()), 'typed array accepts new model instance'
    strictEqual classroom.get('students')[i-1], student, 'typed array given new model instance retains identity'
    
    ok i = classroom.students.push({ age:16 }), 'typed array accepts plain object with properties'
    strictEqual classroom.students()[i-1].age(), 16, 'typed array retains plain object properties'
    
    ok classroom.students(students = [{age:42}]), 'typed array can be re-initialized with new array'
    strictEqual classroom.students(), students, 'typed array re-initialized with new array retains array identity'
    ok classroom.students()[0] instanceof Person, 're-initialized typed array contents cast to model type'
    strictEqual classroom.students()[0].age(), 42, 're-initialized typed array contents retain properties'

test 'typed array with default', ->
    classroom = new TypicalClassroom()
    ok classroom.students()[0] instanceof Person, 'array item default typed correctly'
    strictEqual classroom.get('students')[0].name(), 'Goody Two-Shoes', 'getters work the same as copies on object'


test 'create from complex object', ->
    mathClass = new Classroom(mathClassData)
    
    strictEqual mathClass.room(), '1A', 'default overriden'
    strictEqual mathClass.teacher().name(), 'Mr. Jones', 'property typed and default overriden'
    strictEqual mathClass.students()[1].name(), 'Maria', 'array item typed and default overriden'

/* setup data and classes for tests */
bareModel = new Model()
basicJSON = '{"name":"math class","room":"1A"}'
basicObject = JSON.parse basicJSON
complexJSON = '{"name":"math class","room":"1A","teacher":{"name":"Mr. Jones","age":42},"students":[{"name":"Alex"},{"name":"Maria","age":17}]}'
complexObject = JSON.parse complexJSON

class Person extends Model
    defaults: ->
        name : ''
        age  : 18
    -> super ...
    getId: -> @get 'name'

class Classroom extends Model
    defaults: ->
        room     : null
        name     : ''
        teacher  : null
        students : []
    attributeTypes: ->
        teacher  : Person
        students : Person
    
    -> super ...
    getId: -> @get 'room'

class TypicalClassroom extends Model
    defaults: ->
        room     : null
        name     : ''
        teacher  : null
        students : [ {name:'Goody Two-Shoes'} ]
    attributeTypes: ->
        teacher  : Person
        students : Person
    
    -> super ...
    getId: -> @get 'room'

mathClassData =
    room : "1A"
    name : "math class"
    teacher:
        name : "Mr. Jones"
        age  : 42
    students:
        *   name : "Alex"
        *   name : "Maria"
            age  : 17
