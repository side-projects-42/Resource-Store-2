_  = require 'underscore'
op = require 'operator'
ko = require 'knockout'
moment = require 'moment'

{ AggregationIterator, STOP_ITERATION, CONTINUE,
} = require '../../../util/iterator'

{ GraphNodeData,
} = require '../graph-node-data'
{ ChildNode,
} = require '../child-node'
Trait = require '../graph-node-trait'



/**
 * @class
 * @extends GraphNodeData
 */
class exports.SmoothNodeData extends GraphNodeData
    @registerType 'smooth'
    
    defaults: ->
        factor: 1
    
    attributeTypes: ->
    
    -> super ...



/**
 * @class
 * @extends GraphNode
 */
class exports.SmoothNode extends ChildNode
    @registerType 'smooth'
    traits : [
        Trait.SECTION
        Trait.META_NODE
        Trait.HTML
        Trait.LEAF
    ]
    tagName  : 'section'
    template : 'smooth-node'
    
    
    /**
     * @type SmoothingIterator
     */
    transform : null
    
    
    ->
        super ...
        @transform = new SmoothingIterator null, @factor
        @smoothedNodes()
    
    
    nodes: @computed ->
        @root().filterTraits [Trait.VIS_NODE, Trait.REQUIRES_METRIC]
    
    
    smoothedNodes: @computedRequires 'nodes', (nodes) ->
        nodes
            .filter (node) ->
                not (node.get('disabled') or node.options()?.get('noLegend'))
            .map (node) ~>
                transforms = node.metric().transforms()
                unless _.contains transforms, @transform
                    node.metric().transforms.push @transform
                node
    
    


/**
 * @class Iterator transform which aggregates values into `factor`-sized averages.
 * @extends AggregationIterator
 */
class exports.SmoothingIterator extends AggregationIterator
    
    /**
     * @constructor
     * @param {ko.observable<Number>} factor Observable for the smoothing factor.
     */
    (iter, factor) ->
        @chunk = []
        if typeof factor is 'function'
            options = {factor}
        else
            [factor, options] = [factor.factor, factor]
        @factor = factor
        
        # when used with Query via SmoothNode, @iter will be set by Iterator#compose
        super iter, options
    
    
    hasNext: ->
        @iter.hasNext() or @chunk.length > 0
    
    /**
     * Consume rows, queuing until we have enough to generate an average.
     */
    offer: (row) ->
        return @flush() if row is STOP_ITERATION
        
        @chunk.push row
        @isDate ?= row.map -> it instanceof Date
        
        return @flush() if @chunk.length >= @factor()
        CONTINUE
    
    
    /**
     * Consume up to `@factor` of the buffer.
     */
    flush: ->
        return STOP_ITERATION unless @chunk.length > 0
        rows = @chunk.splice 0, @factor()
        
        avgs = [0] * rows[0].length
        for row of rows
            for v, idx of row
                # avgs[idx] ?= 0
                avgs[idx] += (+v) / rows.length
        
        avgs.map @coerce, this
    
    
    /**
     * Restore Date-type to data after interpolation.
     */
    coerce: (v, idx) ->
        if @isDate?[idx] then new Date(v) else v
    
    
    



