_  = require 'underscore'
ko = require 'knockout'
d3 = require 'd3'

{ GroupNode, GroupNodeData,
} = require '../group-node'
{ ViewportNodeData, ViewportNode,
} = require '../viewport-node'
{ GeoMapMetric,
} = require '../../../data/metric'

Trait = require '../graph-node-trait'
ProjectColors = require '../../project-colors'


VALID_PROJECTIONS = <[
    albers albersUsa
    azimuthal azimuthalEqualArea azimuthalEquidistant
    equirectangular gnomonic
    mercator orthographic stereographic
]>


/**
 * @class
 * @extends ViewportNodeData
 */
export class GeoMapNodeData extends ViewportNodeData
    @registerType 'geo-map'
    -> super ...
    
    
    defaults: ->
        width  : null # TODO: these should cascade :(
        height : null
        
        options:
            projection      : 'mercator'
            featuresColor   : '#FFFFFF'
            backgroundColor : '#BFBFBF'
        # Override the scale types, as this viewport deals with pixels
        x:
            scaleType : 'linear'
            padding   : 0
        y:
            scaleType : 'linear'
            padding   : 0
    
    attributeTypes: ->
        metric: GeoMapMetric
    
    
    /**
     * The d3 projection operator for this map.
     * @type ko.computed<d3.geo.projection>
     */
    projectionOp : @computedRequires 'options.projection', (proj) ->
        if _.contains(VALID_PROJECTIONS, proj) and projection = d3.geo[proj]
            return projection
        null
    



/**
 * @class
 * @extends ViewportNode
 */
export class GeoMapNode extends ViewportNode
    @registerType 'geo-map'
    traits : [
        Trait.VIEWPORT
        Trait.VIS_NODE
        Trait.REQUIRES_METRIC
        Trait.METRIC_GEO_MAP
        Trait.SVG
    ]
    -> super ...
    
    fullWidth:  @computed -> @root().fullWidth()
    fullHeight: @computed -> @root().fullHeight()
    margin: { top:0, right:0, bottom:0, left:0 }
    
    
    /**
     * Map features.
     * @type ko.observable<d3.selection>
     */
    features    : ko.observable null
    
    
    /**
     * Observable used to recalculate feature properties (as the array's membership won't change).
     * @type ko.observable<Object>
     */
    featurePath : ko.observable {}
    
    
    buildElement: (parentElement) ->
        el = super ...
        @sel.append 'svg:g' .classed 'viewport', true
        el
    
    
    determineDOMParentForChildNode: (node) ->
        nodeParentEl = super ...
        if @el() is nodeParentEl
            nodeParentEl = @contentViewportEl()
        nodeParentEl
    
    
    render: ->
        viewport = @viewport()
        width    = viewport.width()
        height   = viewport.height()
        mapData  = @model()?.metric()?.data()
        el       = @contentViewportEl()
        return unless width and mapData and el
        return unless options = @model().options()
        return unless d3Proj  = @model().projectionOp()
        
        if bgColor = options.get('backgroundColor')
            viewport.background bgColor
        
        @projection ?= d3Proj()
            .scale width
            .translate viewport.center()
        
        @path ?= d3.geo.path()
            .projection @projection
        
        g = el.selectAll 'g.features'
            .data [this]
        g.enter().append 'g'
            .classed 'features', true
        
        features = g.selectAll '.feature'
            .data mapData.features
        features.enter().append 'path'
            .classed 'feature', true
            .attr 'id', ~> "#{@nodeId}_#{it.id}"
            .attr 'd', @path
            .style 'fill', options.get('featuresColor')
        
        @features features
        @featurePath {}
    
    
    /**
     * Handle zooming the map projection instead of the viewport SVG node.
     */
    watchZoom: @computed ->
        viewport = @viewport()
        features = @features()
        { scale, sx, sy, tx, ty } = @zoomTransform()
        return unless viewport and features?.length and @projection and @path
        width    = viewport.width()
        [cx, cy] = viewport.center()
        @projection
            .scale width * d3.max(scale)
            .translate [ cx*sx + tx, cy*sy + ty ]
        features
            .attr 'd', @path
            .style 'fill', @model().options().get('featuresColor')
        @featurePath {}
    
    
