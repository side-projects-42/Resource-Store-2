ko = require 'knockout'

extensions =
    
    /**
     * Registers a callback to be notified with both the old and
     * new value -- unlike `.subscribe()` -- when this observable changes:
     * 
     *  `callback.call(cxt or subscription, oldValue, newValue, observable)`
     * 
     * @param {Function} callback
     * @param {Object} [cxt] Context for the callback; defaults to the subscription.
     * @returns {Object} Subscription for this registration.
     */
    onChange: (callback, cxt) ->
        target    = this
        lastValue = null
        
        beforeSub = @subscribe do
            (oldValue) -> lastValue := oldValue
            'beforeChange'
        changeSub = @subscribe do
            (newValue) -> callback.call(cxt or subscription, lastValue, newValue, target)
            'change'
        dispose = ->
            subs.isDisposed = true
            beforeSub.dispose()
            changeSub.dispose()
        
        subs = { target, callback, dispose, beforeSub, changeSub }
    



ko.subscribable.fn import extensions
exports import extensions

