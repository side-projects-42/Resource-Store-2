_ = require '../underscore'


/**
 * @class A mapping of key-value pairs supporting key-aliases.
 */
class exports.AliasDict
    
    /**
     * Data store.
     * @type Object
     * @private
     */
    _data : null
    
    /**
     * Mapping from keys to an array of [potentially nested] alias-keys.
     * @type Object<String, Array<String>>
     * @private
     */
    _aliases : null
    
    
    /**
     * @constructor
     */
    ->
        @_data    = {}
        @_aliases = {}
        @extend ...
    
    
    /**
     * @returns {Number} Number of real keys in the Dict.
     */
    size : ->
        _.keys @_data .length
    
    /**
     * @returns {AliasDict} A copy of the AliasDict, including aliases as well as data.
     */
    clone: ->
        d = new AliasDict @_data
        _.each @_aliases, (v, k) ->
            d.setAlias k, v.slice()
        d
    
    
    
    ### Value Accessors ###
    
    /**
     * @returns {Boolean} Whether there is a value at the given key.
     */
    has : (key) ->
        (@get key)?
    
    /**
     * @returns {*} Ignores aliases, returning the value at key or `undefined`.
     */
    getValue : (key) ->
        prop = _.getNested @_data, key
        prop.value if prop?
    
    get : (key, def) ->
        aliases = @_aliases[key] or [key]
        val = aliases.reduce do
            (val, alias) ->
                return val if val? is not undefined
                prop = _.getNested @_data, alias
                prop.value if prop?
            undefined
        
        val ? def
    
    set : (key, val) ->
        _.setNested @_data, key, val, {+ensure}
        val
    
    unset : (key) ->
        prop = _.getNestedMeta key
        if prop
            delete prop.obj[prop.key]
            prop.value
    
    
    
    ### Alias Methods ###
    
    hasAlias : (key) ->
        @_aliases[key]?
    
    getAlias : (key, def=[]) ->
        @_aliases[key] or def
    
    setAlias: (key, aliases) ->
        @_aliases[key] = if _.isArray aliases then aliases else [aliases]
        this
    
    addAlias : (key, ...aliases) ->
        @_aliases[key] = _.flatten @getAlias(key, [key]).concat(aliases)
        this
    
    unsetAlias : (key) ->
        delete @_aliases[key]
    
    
    
    ### Collection Methods ###
    
    toObject: ->
        _.clone @_data
    
    keys: ->
        _.keys @_data
    
    values: ->
        _.values @_data
    
    extend : (...args) ->
        for o of args
            for k,v in o then @set k, v
        this
    
    reduce : (fn, acc, context=this) ->
        _.reduce @_data, fn, acc, context
    
    map : (fn, context=this) ->
        _.map @_data, fn, context
    
    filter: (fn, context=this) ->
        _.filter @_data, fn, context
    
    each : (fn, context=this) ->
        _.each @_data, fn, context
        this
    
    invoke : (name, ...args) ->
        _.invoke @_data, name, ...args
    
    pluck : (attr) ->
        _.pluck @_data, attr
    
    find: (fn, context=this) ->
        _.find @_data, fn, context
    
    
    toString: ->
        Cls = @constructor
        "#{Cls.displayName or Cls.name}()"



