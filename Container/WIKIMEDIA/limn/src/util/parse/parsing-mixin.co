_ = require '../underscore'
{ Mixin,
} = require '../mixin'

parsers = require './parsers'


/**
 * @class Methods for a class to select parsers by type reflection.
 * @mixin
 */
class exports.ParsingMixin extends Mixin implements parsers
    
    parseValue: (v, type) ->
        @getParser(type)(v)
    
    
    getParser: (type='String') ->
        # If this is a known type and we have a parser for it, return that
        fn = @["parse#type"]
        return fn if typeof fn is 'function'
        
        # Handle compound/optional types
        # XXX: handle 'or' by returning an array of parsers?
        type = _ String(type).toLowerCase()
        for t of <[ Integer Float Number Boolean RegExp Date Object Array Function ]>
            if type.startsWith t.toLowerCase()
                return @["parse#t"]
        @defaultParser or @parseString
    
    
    getParserFromExample: (v) ->
        return null unless v?
        typeName = _.typeName v
        typeName = 'Object' if typeName is 'Class'
        @getParser typeName
    
    
    getTypeNameFromExample: (v) ->
        typeName = _.typeName v
        switch typeName
        case 'Class'            then typeName = 'Object'
        case 'Integer' 'Float'  then typeName = 'Number'
        typeName
    
    
