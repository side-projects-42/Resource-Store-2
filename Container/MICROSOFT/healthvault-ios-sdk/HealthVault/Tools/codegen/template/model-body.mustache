//
// {{classname}}.m
// MHVLib
//
{{>licenceInfo}}

{{#models}}
{{#model}}
#import "{{classname}}.h"

@implementation {{classname}}

+ (BOOL)shouldValidateProperties
{
    return YES;
}

- (instancetype)init {
  self = [super init];
  if (self) {
    // initialize property's default value, if any
    {{#vars}}{{#defaultValue}}self.{{name}} = {{{defaultValue}}};
    {{/defaultValue}}{{/vars}}
  }
  return self;
}

{{#vars}}{{^vendorExtensions.x-unique-id-key}}{{/vendorExtensions.x-unique-id-key}}{{#vendorExtensions.x-unique-id-key}}
-(NSString*)indexPropertyName {
    return @"{{name}}";
}
{{/vendorExtensions.x-unique-id-key}}{{/vars}}
{{#discriminator}}
/**
 * Maps "discriminator" value to the sub-class name, so that inheritance is supported.
 */
- (id)initWithDictionary:(NSDictionary *)dict error:(NSError *__autoreleasing *)err {
    NSString * discriminatedClassName = [dict valueForKey:@"{{discriminator}}"];
    if(discriminatedClassName == nil ){
         return [super initWithDictionary:dict error:err];
    }
    Class class = NSClassFromString([@"{{classPrefix}}" stringByAppendingString:discriminatedClassName]);
    if(!class) {
        class = NSClassFromString([@"{{classPrefix}}" stringByAppendingString:[discriminatedClassName capitalizedString]]);
    }
    if([self class ] == class) {
        return [super initWithDictionary:dict error:err];
    }
    return [[class alloc] initWithDictionary:dict error: err];
}
{{/discriminator}}

+ (NSDictionary *)propertyNameMap
{
    static dispatch_once_t once;
    static NSMutableDictionary *names = nil;
    dispatch_once(&once, ^{
        names = [[super propertyNameMap] mutableCopy];
        [names addEntriesFromDictionary:@{
            {{#vars}}
            @"{{name}}": @"{{baseName}}"{{#hasMore}},{{/hasMore}}
            {{/vars}}
        }];
    });
    return names;
}

+ (NSDictionary *)objectParametersMap
{
    static dispatch_once_t once;
    static NSMutableDictionary *types = nil;
    dispatch_once(&once, ^{
        types = [[super objectParametersMap] mutableCopy];
        [types addEntriesFromDictionary:@{
{{#vars}}{{#isPrimitiveType}}{{#isEnum}}            @"{{name}}": [{{classname}}{{enumName}} class],
{{/isEnum}}{{/isPrimitiveType}}{{^isPrimitiveType}}            @"{{name}}": [{{ complexType }} class]{{#hasMore}},{{/hasMore}}
{{/isPrimitiveType}}{{/vars}}
        }];
    });
    return types;
}
{{/model}}
@end
{{#model}}
{{#vars}}
{{#isEnum}}
{{#isContainer}}
{{#items}}

@implementation {{classname}}{{enumName}}

-(NSDictionary *)enumMap
{
    return @{
        {{#_enum}}
        @"{{.}}": @"{{.}}",
        {{/_enum}}
    };
}

{{#_enum}}
+({{classname}}{{enumName}} *)MHV{{.}}
{
    return [[{{classname}}{{enumName}} alloc] initWithString:@"{{.}}"];
}
{{/_enum}}
@end
{{/items}}
{{/isContainer}}
{{^isContainer}}
@implementation {{classname}}{{enumName}}

-(NSDictionary *)enumMap
{
    return @{
        {{#_enum}}
        @"{{.}}": @"{{.}}",
        {{/_enum}}
    };
}

{{#_enum}}
+({{classname}}{{enumName}} *)MHV{{.}}
{
    return [[{{classname}}{{enumName}} alloc] initWithString:@"{{.}}"];
}
{{/_enum}}
@end
{{/isContainer}}
{{/isEnum}}
{{/vars}}
{{/model}}
{{/models}}
