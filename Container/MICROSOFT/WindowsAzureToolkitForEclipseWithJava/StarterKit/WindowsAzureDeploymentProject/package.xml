<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--
Copyright (c) Microsoft Corporation

All rights reserved. 

MIT License

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files 
(the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, 
publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, 
subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF 
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR 
ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH 
THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--><project basedir="." default="createwapackage" name="WindowsAzureDeploymentProject">
	<property location="." name="cspack.dir"/>
	<property location="./lib" name="azure.lib.dir"/>
	<property location="" name="publishsettingspath"/>
	<property name="subscriptionid" value=""/>
	<property name="cloudservicename" value=""/>
	<property name="region" value=""/>
	<property name="storageaccountname" value=""/>
	<property name="deploymentslot" value="Staging"/>
	<property name="overwritepreviousdeployment" value="true"/>

	<path id="build.classpath">
		<!-- Setting cspack.jar in classpath -->
		<fileset dir="${cspack.dir}">
			<include name="*.jar"/>
			<include name="**/*.jar"/>
		</fileset>

		<!-- Setting azure libraries in classpath -->
		<fileset dir="${azure.lib.dir}">
			<include name="*.jar"/>
			<include name="dependencies/*.jar"/>
		</fileset>
	</path>

	<!-- This task is used for storing properties specific to Azure cloud service project -->
	<target description="Stores properties used by Azure project" name="waprojectproperties">
		<property name="project.enableremoteaccess" value="true"/>

		<!-- NOTE: The certificate with the thumbprint 875F1656A34D93B266E71BF19C116C39F16B6987 refers to 
		the SampleRemoteDesktopPrivate.pfx/.cer certificate files included with the Azure Starter Kit for Java. 
		When you upload the .pfx certificate to Azure, you need to provide the following password: Password1
		Note this certificate password is *publicly known* so you should not use this sample certificate for anything 
		other than educational purposes only. To generate your own self-signed certificate (.pfx and .cer) you can use 
		encutil.exe from wastarterkit4java.codeplex.com.  You may delete this comment after you stop referencing this 
		sample certificate. -->
		<property name="cert.windowsazureremotedesktop" value="${basedir}\cert\SampleRemoteAccessPublic.cer"/>
		<property name="creator.version" value="2.8.0"/>
	</target>

	<!-- Force emulator reset to ensure no locks on deploy directory -->
	<target name="checkResetScript">
		<available file="${basedir}\emulatorTools\ResetEmulator.cmd" property="fileExists"/>
		<available file="${basedir}\emulatorTools\.WaitForReset.cmd" property="waitForResetExists"/>
	</target>

	<target depends="checkResetScript" if="fileExists" name="resetEmulator">
		<exec executable="${basedir}\emulatorTools\ResetEmulator.cmd" failifexecutionfails="false"/>
	</target>

	<target depends="resetEmulator" if="waitForResetExists" name="waitForReset">
		<exec executable="${basedir}\emulatorTools\.WaitForReset.cmd" failifexecutionfails="false"/>
	</target>

	<!-- This task creates a Azure cloud service package -->
	<target depends="waitForReset" description="Creates an Azure package" name="createwapackage">
		<taskdef classname="com.microsoftopentechnologies.windowsazure.tools.build.WindowsAzurePackage" classpathref="build.classpath" name="windowsazurepackage"/>

		<!-- This is the directory where the Azure deployment package or folder will be saved -->
		<property location="${basedir}\deploy" name="wapackagedir"/>

		<move failonerror="false" file="${wapackagedir}" overwrite="true" tofile="${wapackagedir}.old"/>
		<mkdir dir="${wapackagedir}"/>

		<parallel failonany="true">
			<delete dir="${wapackagedir}.old" includeemptydirs="true"/>

			<!-- Create a Azure deployment package
		    
			Attributes:

			packagefilename:
					(Required) The name, including the extension but not the full path, of the deployment package or 
					folder to be built. By convention, if creating a package file for deployment to the cloud 
					(packagetype="cloud"), use the *.cspkg extension. If creating only a directory layout for local 
					testing in the development fabric (packagetype="True"), use the *.csx extension.

			[configurationfilename]:
					The name, including the extension but not the full path, of the cloud service configuration file (*.cscfg).
					This file must exist in the root directory of the project (see the projectDir attribute). 
					If not specified, the default name "ServiceConfiguration.cscfg" will be assumed.
			
			[definitionfilename]:
					The name, including the extension but not the full path, of the cloud service definition file (*.csdef). 
					This file must exist in the root directory of the project (see the projectdir attribute).
					If not specified, the default name "ServiceDefinition.csdef" is assumed.

			[emulatortoolsdir]:
					The directory where the emulator tools will be created by the build process.
					If not specified, the default "emulatorTools" directory in the project directory 
					will be used.
			
			[cloudtoolsdir]:
					The directory where the cloud tools will be created by the build process.
					If not specified, the default "cloudTools" directory in the project directory 
					will be used.

			[packagedir]: 
					The target directory of the deployment package file or folder. 
					If not specified, "<projectdir>/deploy" will be used.

			[packagetype = {cloud | local}]
					cloud:	(default) Builds a package file for deployment to the Azure cloud, for example via the Windows 
							Azure management portal.
					local:	Creates a package directory layout for local testing in the Azure Compute 
							Emulator and a command script (csrun.cmd) for you to start your cloud service in the development 
							fabric more easily.

			[projectdir]:
					The root directory of the project. The service definition (*.csdef) and service configuration (*.cscfg) 
					files are expected to exist there. If not specified, the task will attempt to determine the project 
					directory automatically.

			[sdkdir]: 
					The directory of the cspack.exe tool. If not specified, an attempt will be made to find it automatically.
			
			[emulatordir]:
					The directory of the Azure Emulator installation. If not specified, an attempt will be made to find it automatically.

			[usectppackageformat]:
					If set to true and packagetype=cloud, then the package is built in OPC file format, supported by Azure SDK v1.7 and later.

			[rolepropertiesfilename]:
					The file name of a properties file in the project to associate with each role.
			
			[portalurl]:
					The URL of the Azure portal used to generate the shortcut link

			[verifydownloads = {true | false}]
					true:	(default) Verifies the download URLs of components that have cloudsrc specified when building for the cloud
					false:	Disables download URL verification

			-->
			<windowsazurepackage configurationfilename="ServiceConfiguration.cscfg" definitionfilename="ServiceDefinition.csdef" packagedir="${wapackagedir}" packagefilename="WindowsAzurePackage.cspkg" packagetype="local" portalurl="http://windows.azure.com" projectdir="${basedir}" publishsettingspath="${publishsettingspath}" region="${region}" rolepropertiesfilename=".rolePropertiesOS3" storageaccountname="${storageaccountname}" subscriptionid="${subscriptionid}">

				<!-- Create a sample role -->
				<workerrole approotdir="${basedir}\WorkerRole1\approot" name="WorkerRole1">

					<!-- Define an Azure role component. i.e. a file or directory to be included in the approot and deployed in 
					Azure based on the specified settings. A component can also represent a commandline when used with deploymethod='exec'	    
				
					Attributes:
	
					[importsrc]:
							The file or directory path from which the component will be imported, relative to approot.
					
					[importmethod = {none | copy | zip | auto}]:
							none:	(default) No import action is taken. The component is assumed to be already in the approot or to be a commandline. 
							auto:	The same as 'none', but this value could be overloaded by external builders to have special meaning.
							copy: 	Copies from the path provided in importsrc into the approot.
							zip:	Zips the file or directory at the path provided in importsrc and places the zip file into the approot.
							
					[importas]:
							The name under which the component will be imported into the approot. It can be a directory name if importing
							a directory, or a file name if importing files. If not specified and no importmethod is 'none', then this is 
							assumed to be the same as importsrc
		
					[deploymethod = {none | copy | unzip | exec}]:
							none:	(default) No deployment action is taken. 
							copy:	Copies the file or directory specified by importas from the approot into the directory specified by deploydir
							unzip:	Unzips the file specified by importas from the approot into the directory specified by deploydir
							exec:	Interprets importas as a command line and executes it during deployment in the working directory specified by deploydir
							
					[deploydir]:
							The directory, relative to approot, into which the component will be deployed based on deploymethod.
					
					[cloudsrc]:
							The URL of the file representing this component that will be downloaded when deploying in the cloud (not emulator). 
							This will prevent the component from getting included in the package.
					
					[cloudkey]:
							An access key for the storage account the blob is in, if cloudsrc points to a private Azure Blob
							If not specified, the cloudsrc URL is assumed to be publicly available.
					
					[cloudmethod = {none | copy | unzip | exec}]
							(This setting is applicable only if cloudsrc is specified)
							none: 	(default) The same deployment method will be applied to the downloaded file as the one specified by deploymethod.
							copy:	Copies the downloaded file into the directory specified by deploydir
							unzip: 	Unzips the downloaded file into the directory specified by deploydir
							exec:	Executes the downloaded file in the working directory specified by deploydir (commandline parameters are not supported)
							
					[cloudupload = {never | auto | always}]
							(This setting is applicable only if cloudsrc and cloudkey are specified and the package is built for the cloud, not  the emulator)
							never:	(default) The component specified by importsrc will be included in the package based on the selected importmethod
							auto:	The component specified by importsrc will not be included in the package. The following deployment logic will be followed:
							        - if the component is available at the location specified by cloudsrc, it will be deployed from there. 
							        - else, if cloudaltsrc is provided and the download is available there, it will be deployed from there and also copied 
							          into the Azure Blob storage location specified by cloudsrc for future deployments. 
							        - else, the component will be uploaded by the build process into blob specified by cloudsrc.
							always:	The component specified by importsrc will not be included in the package, but will always be uploaded by the build process
									into the Azure Blob storage location specified by cloudsrc and cloudkey, regardless of whether it already exists at
									that location or not.
									
					[cloudaltsrc]:
							If a download from the URL in cloudsrc fails, a download from this alternative URL will be attempted.
			-->
					<component deploydir="%SERVER_APPS_LOCATION%" deploymethod="copy" importas="HelloWorld.war" type="server.app"/>
				</workerrole>

				<!-- $TODO: To add more roles, copy and paste the workerrole element for each new role 
				 and modify the required settings:
					name:		Must match the "name" attribute from WorkerRole element from the service definition (.csdef) file
					approot:	The directory whose contents are to be included in the package. After deployment, the contents of this folder will be available 
								in the role instance's approot directory.
			-->
			</windowsazurepackage>
		</parallel>

	</target>

	<!-- This task builds and publishes Azure project to Cloud. -->
	<target depends="createwapackage" description="Publish Azure project to cloud" name="publish">
		<taskdef classname="com.microsoftopentechnologies.windowsazure.tools.build.AzurePublish" classpathref="build.classpath" name="azurepublish"/>
		<azurepublish cloudservicename="${cloudservicename}" deploymentslot="${deploymentslot}" overwritepreviousdeployment="${overwritepreviousdeployment}" projectdir="${basedir}" publishsettingspath="${publishsettingspath}" region="${region}" storageaccountname="${storageaccountname}" subscriptionid="${subscriptionid}"/>
	</target>

	<!-- This task only publishes an already built Azure deployment project (expecting .CSPKG and .CSCFG in deploy directory) -->
	<target description="Publish only (do not rebuild) Azure project to cloud" name="publishonly">
		<taskdef classname="com.microsoftopentechnologies.windowsazure.tools.build.AzurePublish" classpathref="build.classpath" name="azurepublish"/>
		<azurepublish cloudservicename="${cloudservicename}" deploymentslot="${deploymentslot}" overwritepreviousdeployment="${overwritepreviousdeployment}" projectdir="${basedir}" publishsettingspath="${publishsettingspath}" region="${region}" storageaccountname="${storageaccountname}" subscriptionid="${subscriptionid}"/>
	</target>

	<!-- This task unpublishes Azure project. -->
	<target description="Unpublish Azure project" name="unpublish">
		<taskdef classname="com.microsoftopentechnologies.windowsazure.tools.build.AzureUnPublish" classpathref="build.classpath" name="azureunpublish"/>
		<azureunpublish cloudservicename="${cloudservicename}" deploymentslot="${deploymentslot}" publishsettingspath="${publishsettingspath}" subscriptionid="${subscriptionid}"/>
	</target>
</project>
