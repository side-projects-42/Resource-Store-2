// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`.ensureNoExpected() throws error when expected is not undefined with matcherName 1`] = `
"<dim>expect(</><red>received</><dim>)[.not].toBeDefined()</>

<bold>Matcher error</>: this matcher must not have an expected argument

Expected has type:  object
Expected has value: <green>{\\"a\\": 1}</>"
`;

exports[`.ensureNoExpected() throws error when expected is not undefined with matcherName and options 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeDefined<dim>()</>

<bold>Matcher error</>: this matcher must not have an expected argument

Expected has type:  object
Expected has value: <green>{\\"a\\": 1}</>"
`;

exports[`.ensureNumbers() throws error when expected is not a number (backward compatibility) 1`] = `
"<dim>expect(</><red>received</><dim>)[.not].toBeCloseTo(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a number

Expected has type:  string
Expected has value: <green>\\"not_a_number\\"</>"
`;

exports[`.ensureNumbers() throws error when received is not a number (backward compatibility) 1`] = `
"<dim>expect(</><red>received</><dim>)[.not].toBeCloseTo(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a number

Received has type:  string
Received has value: <red>\\"not_a_number\\"</>"
`;

exports[`.ensureNumbers() with options promise empty isNot false received 1`] = `
"<dim>expect(</><red>received</><dim>).</>toBeCloseTo<dim>(</><green>expected</><dim>, </><green>precision</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a number

Received has type:  string
Received has value: <red>\\"\\"</>"
`;

exports[`.ensureNumbers() with options promise empty isNot true expected 1`] = `
"<dim>expect(</><red>received</><dim>).</>not<dim>.</>toBeCloseTo<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a number

Expected has value: <green>undefined</>"
`;

exports[`.ensureNumbers() with options promise rejects isNot false expected 1`] = `
"<dim>expect(</><red>received</><dim>).</>rejects<dim>.</>toBeCloseTo<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a number

Expected has type:  string
Expected has value: <green>\\"0\\"</>"
`;

exports[`.ensureNumbers() with options promise rejects isNot true received 1`] = `
"<dim>expect(</><red>received</><dim>).</>rejects<dim>.</>not<dim>.</>toBeCloseTo<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a number

Received has type:  symbol
Received has value: <red>Symbol(0.1)</>"
`;

exports[`.ensureNumbers() with options promise resolves isNot false received 1`] = `
"<dim>expect(</><red>received</><dim>).</>resolves<dim>.</>toBeCloseTo<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <red>received</> value must be a number

Received has type:  boolean
Received has value: <red>false</>"
`;

exports[`.ensureNumbers() with options promise resolves isNot true expected 1`] = `
"<dim>expect(</><red>received</><dim>).</>resolves<dim>.</>not<dim>.</>toBeCloseTo<dim>(</><green>expected</><dim>)</>

<bold>Matcher error</>: <green>expected</> value must be a number

Expected has value: <green>null</>"
`;

exports[`.stringify() reduces maxDepth if stringifying very large objects 1`] = `"{\\"a\\": 1, \\"b\\": [Object]}"`;

exports[`.stringify() reduces maxDepth if stringifying very large objects 2`] = `"{\\"a\\": 1, \\"b\\": {\\"0\\": \\"test\\", \\"1\\": \\"test\\", \\"2\\": \\"test\\", \\"3\\": \\"test\\", \\"4\\": \\"test\\", \\"5\\": \\"test\\", \\"6\\": \\"test\\", \\"7\\": \\"test\\", \\"8\\": \\"test\\", \\"9\\": \\"test\\"}}"`;

exports[`.stringify() toJSON errors when comparing two objects 1`] = `
"<dim>expect(</><red>received</><dim>).toEqual(</><green>expected</><dim>)</>

Difference:

<green>- Expected</>
<red>+ Received</>

<dim>  Object {</>
<green>-   \\"b\\": 1,</>
<red>+   \\"a\\": 1,</>
<dim>    \\"toJSON\\": [Function toJSON],</>
<dim>  }</>"
`;
