!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t(require("react")):"function"==typeof define&&define.amd?define(["React"],t):"object"==typeof exports?exports["react-middle-ellipsis"]=t(require("react")):e["react-middle-ellipsis"]=t(e.React)}(this,(function(e){return(()=>{"use strict";var t={798:t=>{t.exports=e}},r={};function o(e){var n=r[e];if(void 0!==n)return n.exports;var i=r[e]={exports:{}};return t[e](i,i.exports,o),i.exports}o.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return o.d(t,{a:t}),t},o.d=(e,t)=>{for(var r in t)o.o(t,r)&&!o.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),o.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var n={};return(()=>{o.r(n),o.d(n,{default:()=>l});var e=o(798),t=o.n(e);function r(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function i(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?r(Object(o),!0).forEach((function(t){a(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):r(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}const l=function(r){var o=function(e){var t=e.parentNode,r=t.querySelector(".constrainedChild")||e.childNodes[0],o=t.querySelector(".ellipseMe")||t.querySelector(".constrainedEllipse")||r;null!==r&&null!==o&&(o.hasAttribute("data-original")&&(o.textContent=o.getAttribute("data-original")),function(e,t,r){var o=t.offsetWidth,n=e.offsetWidth,i=r.offsetWidth,a=o>i?o:i;if(a>n){var l=r.textContent,c=l.length,u=(c-(n-(a-i))/(i/c)+5)/2,f=Math.floor(c/2-u),s=Math.ceil(c/2+u);r.setAttribute("data-original",r.textContent),r.textContent=l.substr(0,f)+"..."+l.substr(s)}}(e.offsetWidth>t.offsetWidth?t:e,r,o))},n=(0,e.useCallback)((function(e){null!==e&&(window.addEventListener("resize",(function(){o(e)})),o(e))}));return t().createElement("div",{ref:n,style:i({wordBreak:"keep-all",overflowWrap:"normal"},r.width&&{width:r.width})},r.children)}})(),n})()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,