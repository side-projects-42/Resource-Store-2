import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import { LinkedList, Node } from './linkedlist';

var _Map = typeof Map !== 'undefined' ? Map : /*#__PURE__*/function () {
  // @TODO move this util into its own file
  function MapPoly() {
    _classCallCheck(this, MapPoly);
  }

  _createClass(MapPoly, [{
    key: "set",
    value: function set(key, value) {
      this[key] = value;
    }
  }, {
    key: "get",
    value: function get(key) {
      return this[key];
    }
  }, {
    key: "delete",
    value: function _delete(key) {
      delete this[key];
    }
  }, {
    key: "size",
    get: function get() {
      return Object.keys(this).length;
    }
  }]);

  return MapPoly;
}();

var LRUCache = /*#__PURE__*/function () {
  function LRUCache(maxSize) {
    _classCallCheck(this, LRUCache);

    this.maxLen = maxSize || 1;
    this.items = new _Map();
    this.lru = new LinkedList();
  }

  _createClass(LRUCache, [{
    key: "get",
    value: function get(key) {
      var node = this.items.get(key);
      if (!node || !(node instanceof Node)) return undefined;
      this.lru.unshiftNode(node); // Move to front

      return node.value.value;
    }
  }, {
    key: "set",
    value: function set(key, value) {
      var node = this.items.get(key);

      if (node) {
        if (!(node instanceof Node)) return false;
        this.lru.unshiftNode(node); // Move to front

        this.lru.head.value.value = value; // Update value
      } else {
        if (this.lru.length === this.maxLen) {
          // Remove last
          var last = this.lru.tail;
          if (!last) return false;
          this.items.delete(last.value.key);
          this.lru.removeNode(this.lru.tail); // Remove node
        }

        this.lru.unshift({
          key: key,
          value: value
        }); // Push front

        this.items.set(key, this.lru.head);
      }

      return true;
    }
  }]);

  return LRUCache;
}();

export default LRUCache;