import getFetch from '../getFetch';
import { SplitNetworkError } from '../../utils/lang/Errors';
import logFactory from '../../utils/logger';
var log = logFactory('splitio-services:service');
export default function Fetcher(request) {
  // using `fetch(url, options)` signature to work with unfetch
  var url = request.url; // @TODO: update to use global fetch when IE10+ is deprecated

  return getFetch()(url, request) // https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#Checking_that_the_fetch_was_successful
  .then(function (response) {
    if (!response.ok) {
      // eslint-disable-next-line no-throw-literal
      throw {
        response: response
      };
    }

    return response;
  }).catch(function (error) {
    var resp = error.response;
    var msg = '';

    if (resp) {
      // An HTTP error
      switch (resp.status) {
        case 404:
          msg = 'Invalid API key or resource not found.';
          break;

        default:
          msg = resp.statusText;
          break;
      }
    } else {
      // Something else, either an error making the request or a Network error.
      msg = error.message;
    }

    if (!resp || resp.status !== 403) {
      // 403's log we'll be handled somewhere else.
      log[request.logErrorsAsInfo ? 'info' : 'error']("Response status is not OK. Status: ".concat(resp ? resp.status : 'NO_STATUS', ". URL: ").concat(url, ". Message: ").concat(msg));
    } // passes `undefined` as statusCode if not an HTTP error (resp === undefined)


    throw new SplitNetworkError(msg, resp && resp.status);
  });
}