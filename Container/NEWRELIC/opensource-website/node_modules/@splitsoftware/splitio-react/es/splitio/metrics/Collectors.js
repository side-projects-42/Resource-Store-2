import _inherits from "@babel/runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var ProducerMetricsCollector = /*#__PURE__*/function () {
  function ProducerMetricsCollector(storage) {
    _classCallCheck(this, ProducerMetricsCollector);

    this.storage = storage;
    this.latency = this.latency.bind(this);
    this.count = this.count.bind(this);
    this.countException = this.countException.bind(this);
  }

  _createClass(ProducerMetricsCollector, [{
    key: "latency",
    value: function latency(ms) {
      this.storage.metrics.track("".concat(this.metricType, ".time"), ms);
    }
  }, {
    key: "count",
    value: function count(status) {
      this.storage.count.track("".concat(this.metricType, ".status.").concat(status));
    }
  }, {
    key: "countException",
    value: function countException() {
      this.storage.count.track("".concat(this.metricType, ".exception"));
    }
  }]);

  return ProducerMetricsCollector;
}();

export var SegmentChangesCollector = /*#__PURE__*/function (_ProducerMetricsColle) {
  _inherits(SegmentChangesCollector, _ProducerMetricsColle);

  var _super = _createSuper(SegmentChangesCollector);

  function SegmentChangesCollector(storage) {
    var _this;

    _classCallCheck(this, SegmentChangesCollector);

    _this = _super.call(this, storage);
    _this.metricType = 'segmentChangeFetcher';
    return _this;
  }

  return SegmentChangesCollector;
}(ProducerMetricsCollector);
export var SplitChangesCollector = /*#__PURE__*/function (_ProducerMetricsColle2) {
  _inherits(SplitChangesCollector, _ProducerMetricsColle2);

  var _super2 = _createSuper(SplitChangesCollector);

  function SplitChangesCollector(storage) {
    var _this2;

    _classCallCheck(this, SplitChangesCollector);

    _this2 = _super2.call(this, storage);
    _this2.metricType = 'splitChangeFetcher';
    return _this2;
  }

  return SplitChangesCollector;
}(ProducerMetricsCollector);
export var MySegmentsCollector = /*#__PURE__*/function (_ProducerMetricsColle3) {
  _inherits(MySegmentsCollector, _ProducerMetricsColle3);

  var _super3 = _createSuper(MySegmentsCollector);

  function MySegmentsCollector(storage) {
    var _this3;

    _classCallCheck(this, MySegmentsCollector);

    _this3 = _super3.call(this, storage);
    _this3.metricType = 'mySegmentsFetcher';
    return _this3;
  }

  return MySegmentsCollector;
}(ProducerMetricsCollector);
export var ClientCollector = /*#__PURE__*/function () {
  function ClientCollector(storage) {
    _classCallCheck(this, ClientCollector);

    this.storage = storage;
    this.ready = this.ready.bind(this);
    this.getTreatment = this.getTreatment.bind(this);
    this.getTreatments = this.getTreatments.bind(this);
    this.getTreatmentWithConfig = this.getTreatmentWithConfig.bind(this);
    this.getTreatmentsWithConfig = this.getTreatmentsWithConfig.bind(this);
  }

  _createClass(ClientCollector, [{
    key: "ready",
    value: function ready(ms) {
      this.storage.metrics.track('sdk.ready', ms);
    }
  }, {
    key: "getTreatment",
    value: function getTreatment(ms) {
      this.storage.metrics.track('sdk.getTreatment', ms);
    }
  }, {
    key: "getTreatments",
    value: function getTreatments(ms) {
      this.storage.metrics.track('sdk.getTreatments', ms);
    }
  }, {
    key: "getTreatmentWithConfig",
    value: function getTreatmentWithConfig(ms) {
      this.storage.metrics.track('sdk.getTreatmentWithConfig', ms);
    }
  }, {
    key: "getTreatmentsWithConfig",
    value: function getTreatmentsWithConfig(ms) {
      this.storage.metrics.track('sdk.getTreatmentsWithConfig', ms);
    }
  }]);

  return ClientCollector;
}();