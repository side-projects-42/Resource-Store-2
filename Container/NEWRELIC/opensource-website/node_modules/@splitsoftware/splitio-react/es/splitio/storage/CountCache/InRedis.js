import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

/**
Copyright 2016 Split Software

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
**/
import BaseMetricsAsyncCache from '../BaseMetricsAsyncCache';

var CountCacheInRedis = /*#__PURE__*/function (_BaseMetricsAsyncCach) {
  _inherits(CountCacheInRedis, _BaseMetricsAsyncCach);

  var _super = _createSuper(CountCacheInRedis);

  function CountCacheInRedis(keys, redis) {
    var _this;

    _classCallCheck(this, CountCacheInRedis);

    _this = _super.call(this);
    _this.keys = keys;
    _this.redis = redis;
    return _this;
  }

  _createClass(CountCacheInRedis, [{
    key: "track",
    value: function track(metricName) {
      return this.redis.incr(this.keys.buildCountKey(metricName)).catch(function () {// noop, for telemetry metrics there's no need to throw.
      });
    }
  }]);

  return CountCacheInRedis;
}(BaseMetricsAsyncCache);

export default CountCacheInRedis;