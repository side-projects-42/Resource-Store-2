import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _wrapNativeSuper from "@babel/runtime/helpers/esm/wrapNativeSuper";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

export var SplitError = /*#__PURE__*/function (_Error) {
  _inherits(SplitError, _Error);

  var _super = _createSuper(SplitError);

  function SplitError() {
    var _this;

    var msg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'Split Error';

    _classCallCheck(this, SplitError);

    _this = _super.call(this, msg);
    _this.message = msg;
    return _this;
  }

  return SplitError;
}( /*#__PURE__*/_wrapNativeSuper(Error));
export var SplitTimeoutError = /*#__PURE__*/function (_SplitError) {
  _inherits(SplitTimeoutError, _SplitError);

  var _super2 = _createSuper(SplitTimeoutError);

  function SplitTimeoutError(msg) {
    _classCallCheck(this, SplitTimeoutError);

    return _super2.call(this, msg || 'Split Timeout Error');
  }

  return SplitTimeoutError;
}(SplitError);
export var SplitNetworkError = /*#__PURE__*/function (_SplitError2) {
  _inherits(SplitNetworkError, _SplitError2);

  var _super3 = _createSuper(SplitNetworkError);

  function SplitNetworkError(msg, code) {
    var _this2;

    _classCallCheck(this, SplitNetworkError);

    _this2 = _super3.call(this, msg || 'Split Network Error');
    _this2.statusCode = code;
    return _this2;
  }

  return SplitNetworkError;
}(SplitError);