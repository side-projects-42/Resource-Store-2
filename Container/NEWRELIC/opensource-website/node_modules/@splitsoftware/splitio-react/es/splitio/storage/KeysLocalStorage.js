import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import { startsWith } from '../utils/lang';
import KeyBuilder from './Keys';
import { matching } from '../utils/key/factory';

var KeyBuilderForLocalStorage = /*#__PURE__*/function (_KeyBuilder) {
  _inherits(KeyBuilderForLocalStorage, _KeyBuilder);

  var _super = _createSuper(KeyBuilderForLocalStorage);

  function KeyBuilderForLocalStorage(settings) {
    var _this;

    _classCallCheck(this, KeyBuilderForLocalStorage);

    _this = _super.call(this, settings);
    _this.regexSplitCacheKey = new RegExp("^".concat(_this.settings.storage.prefix, "\\.(splits?|trafficType)\\."));
    return _this;
  }

  _createClass(KeyBuilderForLocalStorage, [{
    key: "buildSegmentNameKey",
    value: function buildSegmentNameKey(segmentName) {
      return "".concat(matching(this.settings.core.key), ".").concat(this.settings.storage.prefix, ".segment.").concat(segmentName);
    }
  }, {
    key: "extractSegmentName",
    value: function extractSegmentName(builtSegmentKeyName) {
      var prefix = "".concat(matching(this.settings.core.key), ".").concat(this.settings.storage.prefix, ".segment.");
      if (startsWith(builtSegmentKeyName, prefix)) return builtSegmentKeyName.substr(prefix.length);
    }
  }, {
    key: "buildSplitsWithSegmentCountKey",
    value: function buildSplitsWithSegmentCountKey() {
      return "".concat(this.settings.storage.prefix, ".splits.usingSegments");
    }
  }, {
    key: "buildLastUpdatedKey",
    value: function buildLastUpdatedKey() {
      return "".concat(this.settings.storage.prefix, ".splits.lastUpdated");
    }
  }, {
    key: "isSplitCacheKey",
    value: function isSplitCacheKey(key) {
      return this.regexSplitCacheKey.test(key);
    }
  }, {
    key: "buildSplitsFilterQueryKey",
    value: function buildSplitsFilterQueryKey() {
      return "".concat(this.settings.storage.prefix, ".splits.filterQuery");
    }
  }]);

  return KeyBuilderForLocalStorage;
}(KeyBuilder);

export default KeyBuilderForLocalStorage;