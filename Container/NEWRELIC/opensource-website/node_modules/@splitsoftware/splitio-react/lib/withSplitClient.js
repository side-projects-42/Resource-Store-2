"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importDefault(require("react"));
var SplitClient_1 = __importDefault(require("./SplitClient"));
/**
 * High-Order Component for SplitClient.
 * The wrapped component receives all the props of the container,
 * along with the passed props from SplitClient (see ISplitClientChildProps).
 *
 * @param splitKey The customer identifier.
 * @param trafficType Traffic type associated with the customer identifier. If no provided here or at the config object, it will be required on the client.track() calls.
 */
function withSplitClient(splitKey, trafficType) {
    return function withSplitClientHoc(WrappedComponent, updateOnSdkUpdate, updateOnSdkTimedout, updateOnSdkReady, updateOnSdkReadyFromCache) {
        if (updateOnSdkUpdate === void 0) { updateOnSdkUpdate = false; }
        if (updateOnSdkTimedout === void 0) { updateOnSdkTimedout = false; }
        if (updateOnSdkReady === void 0) { updateOnSdkReady = true; }
        if (updateOnSdkReadyFromCache === void 0) { updateOnSdkReadyFromCache = true; }
        return function (props) {
            return (react_1.default.createElement(SplitClient_1.default, { splitKey: splitKey, trafficType: trafficType, updateOnSdkUpdate: updateOnSdkUpdate, updateOnSdkTimedout: updateOnSdkTimedout, updateOnSdkReady: updateOnSdkReady, updateOnSdkReadyFromCache: updateOnSdkReadyFromCache }, function (splitProps) {
                return (react_1.default.createElement(WrappedComponent, __assign({}, props, splitProps)));
            }));
        };
    };
}
exports.default = withSplitClient;
