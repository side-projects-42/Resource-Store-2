"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _objectAssign = _interopRequireDefault(require("object-assign"));

var _lang = require("../utils/lang");

var _parser = _interopRequireDefault(require("./parser"));

var _parser2 = _interopRequireDefault(require("../utils/key/parser"));

var _thenable = _interopRequireDefault(require("../utils/promise/thenable"));

var LabelsConstants = _interopRequireWildcard(require("../utils/labels"));

var _constants = require("../utils/constants");

/**
Copyright 2016 Split Software

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
**/
function defaults(inst) {
  // in case we don't have a default treatment in the instanciation, use 'control'
  if (typeof inst.baseInfo.defaultTreatment !== 'string') {
    inst.baseInfo.defaultTreatment = _constants.CONTROL;
  }
}

function evaluationResult(result, defaultTreatment) {
  return {
    treatment: (0, _lang.get)(result, 'treatment', defaultTreatment),
    label: (0, _lang.get)(result, 'label', LabelsConstants.NO_CONDITION_MATCH)
  };
}

function Split(baseInfo, evaluator) {
  if (!(this instanceof Split)) {
    return new Split(baseInfo, evaluator);
  }

  this.baseInfo = baseInfo;
  this.evaluator = evaluator;
  defaults(this);
}

Split.parse = function parse(splitFlatStructure, storage) {
  var conditions = splitFlatStructure.conditions;
  var evaluator = (0, _parser.default)(conditions, storage);
  return new Split((0, _objectAssign.default)({}, splitFlatStructure), evaluator);
};

Split.prototype.getKey = function getKey() {
  return this.baseInfo.name;
};

Split.prototype.getTreatment = function getTreatment(key, attributes, splitEvaluator) {
  var _this$baseInfo = this.baseInfo,
      killed = _this$baseInfo.killed,
      seed = _this$baseInfo.seed,
      defaultTreatment = _this$baseInfo.defaultTreatment,
      trafficAllocation = _this$baseInfo.trafficAllocation,
      trafficAllocationSeed = _this$baseInfo.trafficAllocationSeed,
      algo = _this$baseInfo.algo;
  var parsedKey;
  var treatment;
  var label;

  try {
    parsedKey = (0, _parser2.default)(key);
  } catch (err) {
    return {
      treatment: _constants.CONTROL,
      label: LabelsConstants.EXCEPTION
    };
  }

  if (this.isGarbage()) {
    treatment = _constants.CONTROL;
    label = LabelsConstants.SPLIT_ARCHIVED;
  } else if (killed) {
    treatment = defaultTreatment;
    label = LabelsConstants.SPLIT_KILLED;
  } else {
    var evaluation = this.evaluator(parsedKey, seed, trafficAllocation, trafficAllocationSeed, attributes, algo, splitEvaluator); // Evaluation could be async, so we should handle that case checking for a
    // thenable object

    if ((0, _thenable.default)(evaluation)) {
      return evaluation.then(function (result) {
        return evaluationResult(result, defaultTreatment);
      });
    } else {
      return evaluationResult(evaluation, defaultTreatment);
    }
  }

  return {
    treatment: treatment,
    label: label
  };
};

Split.prototype.isGarbage = function isGarbage() {
  return this.baseInfo.status === 'ARCHIVED';
};

Split.prototype.getChangeNumber = function getChangeNumber() {
  return this.baseInfo.changeNumber;
};

var _default = Split;
exports.default = _default;