"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _logger = _interopRequireDefault(require("../../../utils/logger"));

var _lang = require("../../../utils/lang");

var log = (0, _logger.default)('splitio-settings');
/**
 * This function validates `settings.integrations` object
 *
 * @param {Object} settings SDK settings object to validate
 * @param {Array<string>} validIntegrationTypes list of integration types to filter from `settings.integrations`
 *
 * @returns {Array} array of valid integration items. The array might be empty if `settings` object does not have valid integrations.
 */

var validateIntegrationsSettings = function validateIntegrationsSettings(settings) {
  var validIntegrationTypes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  var integrations = settings.integrations; // If integrations is not an array or an empty array, we return an empty array (no integrations).

  if (!Array.isArray(integrations) || integrations.length === 0) return []; // We remove invalid integration items

  var validIntegrations = integrations.filter(function (integration) {
    return integration && (0, _lang.isString)(integration.type) && validIntegrationTypes.indexOf(integration.type) > -1;
  });
  var invalids = integrations.length - validIntegrations.length;
  if (invalids) log.warn("".concat(invalids, " integration ").concat(invalids === 1 ? 'item' : 'items', " at settings ").concat(invalids === 1 ? 'is' : 'are', " invalid: integration items must have a valid 'type' value"));
  return validIntegrations;
};

var _default = validateIntegrationsSettings;
exports.default = _default;