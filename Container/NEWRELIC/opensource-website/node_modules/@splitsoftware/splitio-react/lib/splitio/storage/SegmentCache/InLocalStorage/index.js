"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _logger = _interopRequireDefault(require("../../../utils/logger"));

var log = (0, _logger.default)('splitio-storage:localstorage');
var DEFINED = '1';

var SegmentCacheInLocalStorage = /*#__PURE__*/function () {
  function SegmentCacheInLocalStorage(keys) {
    (0, _classCallCheck2.default)(this, SegmentCacheInLocalStorage);
    this.keys = keys; // There is not need to flush segments cache like splits cache, since resetSegments receives the up-to-date list of active segments
  }

  (0, _createClass2.default)(SegmentCacheInLocalStorage, [{
    key: "addToSegment",
    value: function addToSegment(segmentName
    /*, segmentKeys: Array<string>*/
    ) {
      var segmentKey = this.keys.buildSegmentNameKey(segmentName);

      try {
        localStorage.setItem(segmentKey, DEFINED);
        return true;
      } catch (e) {
        log.error(e);
        return false;
      }
    }
  }, {
    key: "removeFromSegment",
    value: function removeFromSegment(segmentName
    /*, segmentKeys: Array<string>*/
    ) {
      var segmentKey = this.keys.buildSegmentNameKey(segmentName);

      try {
        localStorage.removeItem(segmentKey);
        return true;
      } catch (e) {
        log.error(e);
        return false;
      }
    }
    /**
     * Reset (update) the cached list of segments with the given list, removing and adding segments if necessary.
     *
     * @param {string[]} segmentNames list of segment names
     * @returns boolean indicating if the cache was updated (i.e., given list was different from the cached one)
     */

  }, {
    key: "resetSegments",
    value: function resetSegments(segmentNames) {
      var _this = this;

      var isDiff = false;
      var index; // Scan current values from localStorage

      var storedSegmentNames = Object.keys(localStorage).reduce(function (accum, key) {
        var segmentName = _this.keys.extractSegmentName(key);

        if (segmentName) accum.push(segmentName);
        return accum;
      }, []); // Extreme fast => everything is empty

      if (segmentNames.length === 0 && storedSegmentNames.length === segmentNames.length) return isDiff; // Quick path

      if (storedSegmentNames.length !== segmentNames.length) {
        isDiff = true;
        storedSegmentNames.forEach(function (segmentName) {
          return _this.removeFromSegment(segmentName);
        });
        segmentNames.forEach(function (segmentName) {
          return _this.addToSegment(segmentName);
        });
      } else {
        // Slowest path => we need to find at least 1 difference because
        for (index = 0; index < segmentNames.length && storedSegmentNames.indexOf(segmentNames[index]) !== -1; index++) {// TODO: why empty statement?
        }

        if (index < segmentNames.length) {
          isDiff = true;
          storedSegmentNames.forEach(function (segmentName) {
            return _this.removeFromSegment(segmentName);
          });
          segmentNames.forEach(function (segmentName) {
            return _this.addToSegment(segmentName);
          });
        }
      }

      return isDiff;
    }
  }, {
    key: "isInSegment",
    value: function isInSegment(segmentName
    /*, key: string*/
    ) {
      return localStorage.getItem(this.keys.buildSegmentNameKey(segmentName)) === DEFINED;
    }
  }, {
    key: "setChangeNumber",
    value: function setChangeNumber()
    /*segmentName: string, changeNumber: number*/
    {
      return true;
    }
  }, {
    key: "getChangeNumber",
    value: function getChangeNumber()
    /*segmentName: string*/
    {
      return -1;
    }
  }, {
    key: "registerSegment",
    value: function registerSegment()
    /*segment: string*/
    {
      return false;
    }
  }, {
    key: "registerSegments",
    value: function registerSegments()
    /*segments: Iterable<string>*/
    {
      return false;
    }
  }, {
    key: "getRegisteredSegments",
    value: function getRegisteredSegments() {
      return [];
    }
    /**
     * Removes list of segments from localStorage
     * @NOTE this method is not being used at the moment
     */

  }, {
    key: "flush",
    value: function flush() {
      log.info('Flushing MySegments data from localStorage'); // We cannot simply call `localStorage.clear()` since that implies removing user items from the storage
      // We could optimize next sentence, since it implies iterating over all localStorage items

      this.resetSegments([]);
    }
  }]);
  return SegmentCacheInLocalStorage;
}();

var _default = SegmentCacheInLocalStorage;
exports.default = _default;