/* eslint-disable no-console */
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Logger = exports.setLogLevel = exports.LogLevels = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _objectAssign = _interopRequireDefault(require("object-assign"));

var LogLevels = {
  'DEBUG': 'DEBUG',
  'INFO': 'INFO',
  'WARN': 'WARN',
  'ERROR': 'ERROR',
  'NONE': 'NONE'
}; // DEBUG is the default. The log level is not specific to an SDK instance.

exports.LogLevels = LogLevels;
var GlobalLogLevel = LogLevels.DEBUG;

var setLogLevel = function setLogLevel(level) {
  GlobalLogLevel = level;
};

exports.setLogLevel = setLogLevel;
var defaultOptions = {
  showLevel: true,
  displayAllErrors: false
};

var Logger = /*#__PURE__*/function () {
  function Logger(category, options) {
    (0, _classCallCheck2.default)(this, Logger);
    this.category = category;
    this.options = (0, _objectAssign.default)({}, defaultOptions, options);
  }

  (0, _createClass2.default)(Logger, [{
    key: "debug",
    value: function debug(msg) {
      if (this._shouldLog(LogLevels.DEBUG)) this._log(LogLevels.DEBUG, msg);
    }
  }, {
    key: "info",
    value: function info(msg) {
      if (this._shouldLog(LogLevels.INFO)) this._log(LogLevels.INFO, msg);
    }
  }, {
    key: "warn",
    value: function warn(msg) {
      if (this._shouldLog(LogLevels.WARN)) this._log(LogLevels.WARN, msg);
    }
  }, {
    key: "error",
    value: function error(msg) {
      if (this.options.displayAllErrors || this._shouldLog(LogLevels.ERROR)) this._log(LogLevels.ERROR, msg);
    }
  }, {
    key: "_log",
    value: function _log(level, text) {
      var formattedText = this._generateLogMessage(level, text);

      console.log(formattedText);
    }
  }, {
    key: "_generateLogMessage",
    value: function _generateLogMessage(level, text) {
      var textPre = ' => ';
      var result = '';

      if (this.options.showLevel) {
        result += '[' + level + ']' + (level === LogLevels.INFO || level === LogLevels.WARN ? ' ' : '') + ' ';
      }

      if (this.category) {
        result += this.category + textPre;
      }

      return result += text;
    }
  }, {
    key: "_shouldLog",
    value: function _shouldLog(level) {
      var logLevel = GlobalLogLevel;
      var levels = Object.keys(LogLevels).map(function (f) {
        return LogLevels[f];
      });
      var index = levels.indexOf(level); // What's the index of what it's trying to check if it should log

      var levelIdx = levels.indexOf(logLevel); // What's the current log level index.

      return index >= levelIdx;
    }
  }]);
  return Logger;
}();

exports.Logger = Logger;