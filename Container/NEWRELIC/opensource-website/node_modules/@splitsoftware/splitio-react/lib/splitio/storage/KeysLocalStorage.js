"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _lang = require("../utils/lang");

var _Keys = _interopRequireDefault(require("./Keys"));

var _factory = require("../utils/key/factory");

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var KeyBuilderForLocalStorage = /*#__PURE__*/function (_KeyBuilder) {
  (0, _inherits2.default)(KeyBuilderForLocalStorage, _KeyBuilder);

  var _super = _createSuper(KeyBuilderForLocalStorage);

  function KeyBuilderForLocalStorage(settings) {
    var _this;

    (0, _classCallCheck2.default)(this, KeyBuilderForLocalStorage);
    _this = _super.call(this, settings);
    _this.regexSplitCacheKey = new RegExp("^".concat(_this.settings.storage.prefix, "\\.(splits?|trafficType)\\."));
    return _this;
  }

  (0, _createClass2.default)(KeyBuilderForLocalStorage, [{
    key: "buildSegmentNameKey",
    value: function buildSegmentNameKey(segmentName) {
      return "".concat((0, _factory.matching)(this.settings.core.key), ".").concat(this.settings.storage.prefix, ".segment.").concat(segmentName);
    }
  }, {
    key: "extractSegmentName",
    value: function extractSegmentName(builtSegmentKeyName) {
      var prefix = "".concat((0, _factory.matching)(this.settings.core.key), ".").concat(this.settings.storage.prefix, ".segment.");
      if ((0, _lang.startsWith)(builtSegmentKeyName, prefix)) return builtSegmentKeyName.substr(prefix.length);
    }
  }, {
    key: "buildSplitsWithSegmentCountKey",
    value: function buildSplitsWithSegmentCountKey() {
      return "".concat(this.settings.storage.prefix, ".splits.usingSegments");
    }
  }, {
    key: "buildLastUpdatedKey",
    value: function buildLastUpdatedKey() {
      return "".concat(this.settings.storage.prefix, ".splits.lastUpdated");
    }
  }, {
    key: "isSplitCacheKey",
    value: function isSplitCacheKey(key) {
      return this.regexSplitCacheKey.test(key);
    }
  }, {
    key: "buildSplitsFilterQueryKey",
    value: function buildSplitsFilterQueryKey() {
      return "".concat(this.settings.storage.prefix, ".splits.filterQuery");
    }
  }]);
  return KeyBuilderForLocalStorage;
}(_Keys.default);

var _default = KeyBuilderForLocalStorage;
exports.default = _default;