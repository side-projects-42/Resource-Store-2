"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _objectAssign = _interopRequireDefault(require("object-assign"));

var _thenable = _interopRequireDefault(require("../utils/promise/thenable"));

var _lang = require("../utils/lang");

var _inputValidation = require("../utils/inputValidation");

var collectTreatments = function collectTreatments(splitObject) {
  var conditions = splitObject.conditions; // Rollout conditions are supposed to have the entire partitions list, so we find the first one.

  var allTreatmentsCondition = (0, _lang.find)(conditions, function (cond) {
    return cond.conditionType === 'ROLLOUT';
  }); // Localstorage mode could fall into a no rollout conditions state. Take the first condition in that case.

  if (!allTreatmentsCondition) allTreatmentsCondition = conditions[0]; // Then extract the treatments from the partitions

  return allTreatmentsCondition ? allTreatmentsCondition.partitions.map(function (v) {
    return v.treatment;
  }) : [];
};

var ObjectToView = function ObjectToView(json) {
  var splitObject;

  try {
    splitObject = JSON.parse(json);
  } catch (e) {
    return null;
  }

  if (splitObject == null) return null;
  return {
    name: splitObject.name,
    trafficType: splitObject.trafficTypeName || null,
    killed: splitObject.killed,
    changeNumber: splitObject.changeNumber || 0,
    treatments: collectTreatments(splitObject),
    configs: splitObject.configurations || {}
  };
};

var ObjectsToViews = function ObjectsToViews(jsons) {
  var views = [];
  jsons.forEach(function (split) {
    var view = ObjectToView(split);
    if (view != null) views.push(view);
  });
  return views;
};

function SplitManagerFactory(_splits, context) {
  var SPLIT_FN_LABEL = 'split';
  var statusManager = context.get(context.constants.STATUS_MANAGER);
  return (0, _objectAssign.default)( // Proto-linkage of the readiness Event Emitter
  Object.create(statusManager), {
    /**
     * Get the Split object corresponding to the given split name if valid
     */
    split: function split(maybeSplitName) {
      var splitName = (0, _inputValidation.validateSplit)(maybeSplitName, SPLIT_FN_LABEL);

      if (!(0, _inputValidation.validateIfDestroyed)(context) || !(0, _inputValidation.validateIfReady)(context, SPLIT_FN_LABEL) || !splitName) {
        return null;
      }

      var split = _splits.getSplit(splitName);

      if ((0, _thenable.default)(split)) {
        return split.then(function (result) {
          (0, _inputValidation.validateSplitExistance)(context, splitName, result, SPLIT_FN_LABEL);
          return ObjectToView(result);
        });
      }

      (0, _inputValidation.validateSplitExistance)(context, splitName, split, SPLIT_FN_LABEL);
      return ObjectToView(split);
    },

    /**
     * Get the Split objects present on the factory storage
     */
    splits: function splits() {
      if (!(0, _inputValidation.validateIfDestroyed)(context) || !(0, _inputValidation.validateIfReady)(context, 'splits')) {
        return [];
      }

      var currentSplits = _splits.getAll();

      if ((0, _thenable.default)(currentSplits)) return currentSplits.then(ObjectsToViews);
      return ObjectsToViews(currentSplits);
    },

    /**
     * Get the Split names present on the factory storage
     */
    names: function names() {
      if (!(0, _inputValidation.validateIfDestroyed)(context) || !(0, _inputValidation.validateIfReady)(context, 'names')) {
        return [];
      }

      return _splits.getKeys();
    }
  });
}

var _default = SplitManagerFactory;
exports.default = _default;