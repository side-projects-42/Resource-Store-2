"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _logger = _interopRequireDefault(require("../utils/logger"));

var _task = _interopRequireDefault(require("./task"));

var _SplitChanges = _interopRequireDefault(require("./updater/SplitChanges"));

var _Partial = _interopRequireDefault(require("./browser/Partial"));

/**
Copyright 2016 Split Software

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
**/
var log = (0, _logger.default)('splitio-producer:updater');
/**
 * Startup all the background jobs required for a Browser SDK instance.
 */

var FullBrowserProducer = function FullBrowserProducer(context) {
  var settings = context.get(context.constants.SETTINGS);
  var splitsUpdater = (0, _SplitChanges.default)(context);
  var splitsUpdaterTask = (0, _task.default)(synchronizeSplits, settings.scheduler.featuresRefreshRate);
  var mySegmentsProducer = (0, _Partial.default)(context);
  var _isSynchronizingSplits = false;
  /**
   * @param {boolean | undefined} noCache true to revalidate data to fetch
   */

  function synchronizeSplits(noCache) {
    _isSynchronizingSplits = true; // `splitsUpdater` promise always resolves, and with a false value if it fails to fetch or store splits

    return splitsUpdater(0, noCache).then(function (res) {
      _isSynchronizingSplits = false;
      return res;
    });
  }

  return {
    // Start periodic fetching (polling)
    start: function start() {
      log.info('Starting BROWSER producer');
      splitsUpdaterTask.start();
      mySegmentsProducer.start();
    },
    // Stop periodic fetching (polling)
    stop: function stop() {
      log.info('Stopping BROWSER producer');
      splitsUpdaterTask.stop();
      mySegmentsProducer.stop();
    },
    // Used by SyncManager to know if running in polling mode.
    isRunning: splitsUpdaterTask.isRunning,
    // Used by SplitUpdateWorker
    isSynchronizingSplits: function isSynchronizingSplits() {
      return _isSynchronizingSplits;
    },
    synchronizeSplits: synchronizeSplits,
    // Used by MySegmentUpdateWorker
    isSynchronizingMySegments: mySegmentsProducer.isSynchronizingMySegments,
    synchronizeMySegments: mySegmentsProducer.synchronizeMySegments
  };
};

var _default = FullBrowserProducer;
exports.default = _default;