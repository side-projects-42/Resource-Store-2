"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _backoff = _interopRequireDefault(require("../../utils/backoff"));

/**
 * MySegmentUpdateWorker class
 */
var MySegmentUpdateWorker = /*#__PURE__*/function () {
  /**
   *
   * @param {Object} mySegmentsStorage
   * @param {Object} mySegmentsProducer
   */
  function MySegmentUpdateWorker(mySegmentsStorage, mySegmentsProducer) {
    (0, _classCallCheck2.default)(this, MySegmentUpdateWorker);
    this.mySegmentsStorage = mySegmentsStorage;
    this.mySegmentsProducer = mySegmentsProducer;
    this.maxChangeNumber = 0; // keeps the maximum changeNumber among queued events

    this.segmentList = undefined; // keeps the segmentList (if included in payload) from the queued event with maximum changeNumber

    this.currentChangeNumber = -1; // @TODO: remove once `/mySegments` endpoint provides the changeNumber

    this.put = this.put.bind(this);
    this.__handleMySegmentUpdateCall = this.__handleMySegmentUpdateCall.bind(this);
    this.backoff = new _backoff.default(this.__handleMySegmentUpdateCall);
  } // Private method
  // Preconditions: this.mySegmentsProducer.isSynchronizingMySegments === false
  // @TODO update this block similar to SplitUpdateWorker, once `/mySegments` endpoint provides the changeNumber


  (0, _createClass2.default)(MySegmentUpdateWorker, [{
    key: "__handleMySegmentUpdateCall",
    value: function __handleMySegmentUpdateCall() {
      var _this = this;

      if (this.maxChangeNumber > this.currentChangeNumber) {
        this.handleNewEvent = false;
        var currentMaxChangeNumber = this.maxChangeNumber; // fetch mySegments revalidating data if cached

        this.mySegmentsProducer.synchronizeMySegments(this.segmentList, true).then(function (result) {
          if (result !== false) // Unlike `Split\SegmentUpdateWorker`, we cannot use `mySegmentsStorage.getChangeNumber` since `/mySegments` endpoint doesn't provide this value.
            _this.currentChangeNumber = Math.max(_this.currentChangeNumber, currentMaxChangeNumber); // use `currentMaxChangeNumber`, in case that `this.maxChangeNumber` was updated during fetch.

          if (_this.handleNewEvent) {
            _this.__handleMySegmentUpdateCall();
          } else {
            _this.backoff.scheduleCall();
          }
        });
      }
    }
    /**
     * Invoked by NotificationProcessor on MY_SEGMENTS_UPDATE event
     *
     * @param {number} changeNumber change number of the MY_SEGMENTS_UPDATE notification
     * @param {string[] | undefined} segmentList might be undefined
     */

  }, {
    key: "put",
    value: function put(changeNumber, segmentList) {
      // @TODO uncomment next line once `/mySegments` endpoint provides the changeNumber
      // const currentChangeNumber = this.mySegmentsStorage.getChangeNumber();
      if (changeNumber <= this.currentChangeNumber || changeNumber <= this.maxChangeNumber) return;
      this.maxChangeNumber = changeNumber;
      this.handleNewEvent = true;
      this.backoff.reset();
      this.segmentList = segmentList;
      if (this.mySegmentsProducer.isSynchronizingMySegments()) return;

      this.__handleMySegmentUpdateCall();
    }
  }]);
  return MySegmentUpdateWorker;
}();

exports.default = MySegmentUpdateWorker;