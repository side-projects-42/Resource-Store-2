"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _lang = require("../../../utils/lang");

var _Sets = require("../../../utils/lang/Sets");

var SegmentCacheInMemory = /*#__PURE__*/function () {
  function SegmentCacheInMemory(keys) {
    (0, _classCallCheck2.default)(this, SegmentCacheInMemory);
    this.keys = keys;
    this.flush();
  }

  (0, _createClass2.default)(SegmentCacheInMemory, [{
    key: "addToSegment",
    value: function addToSegment(segmentName, segmentKeys) {
      var values = this.segmentCache[segmentName];
      var keySet = values ? values : new _Sets._Set();
      segmentKeys.forEach(function (k) {
        return keySet.add(k);
      });
      this.segmentCache[segmentName] = keySet;
      return true;
    }
  }, {
    key: "removeFromSegment",
    value: function removeFromSegment(segmentName, segmentKeys) {
      var values = this.segmentCache[segmentName];
      var keySet = values ? values : new _Sets._Set();
      segmentKeys.forEach(function (k) {
        return keySet.delete(k);
      });
      this.segmentCache[segmentName] = keySet;
      return true;
    }
  }, {
    key: "isInSegment",
    value: function isInSegment(segmentName, key) {
      var segmentValues = this.segmentCache[segmentName];

      if (segmentValues) {
        return segmentValues.has(key);
      }

      return false;
    }
  }, {
    key: "registerSegment",
    value: function registerSegment(segmentName) {
      if (!this.segmentCache[segmentName]) {
        this.segmentCache[segmentName] = new _Sets._Set();
      }

      return true;
    }
  }, {
    key: "registerSegments",
    value: function registerSegments(segments) {
      for (var i = 0; i < segments.length; i++) {
        this.registerSegment(segments[i]);
      }

      return true;
    }
  }, {
    key: "getRegisteredSegments",
    value: function getRegisteredSegments() {
      return Object.keys(this.segmentCache);
    }
  }, {
    key: "setChangeNumber",
    value: function setChangeNumber(segmentName, changeNumber) {
      var segmentChangeNumberKey = this.keys.buildSegmentTillKey(segmentName);
      this.segmentChangeNumber[segmentChangeNumberKey] = changeNumber;
      return true;
    }
  }, {
    key: "getChangeNumber",
    value: function getChangeNumber(segmentName) {
      var segmentChangeNumberKey = this.keys.buildSegmentTillKey(segmentName);
      var value = this.segmentChangeNumber[segmentChangeNumberKey];
      return (0, _lang.numberIsInteger)(value) ? value : -1;
    }
  }, {
    key: "flush",
    value: function flush() {
      this.segmentCache = {};
      this.segmentChangeNumber = {};
    }
  }]);
  return SegmentCacheInMemory;
}();

var _default = SegmentCacheInMemory;
exports.default = _default;