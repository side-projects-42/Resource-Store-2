"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.DEFAULT_CACHE_EXPIRATION_IN_MILLIS = void 0;

var _InMemory = _interopRequireDefault(require("./SplitCache/InMemory"));

var _InLocalStorage = _interopRequireDefault(require("./SplitCache/InLocalStorage"));

var _InMemory2 = _interopRequireDefault(require("./SegmentCache/InMemory"));

var _InLocalStorage2 = _interopRequireDefault(require("./SegmentCache/InLocalStorage"));

var _InMemory3 = _interopRequireDefault(require("./ImpressionsCache/InMemory"));

var _InMemory4 = _interopRequireDefault(require("./LatencyCache/InMemory"));

var _InMemory5 = _interopRequireDefault(require("./CountCache/InMemory"));

var _InMemory6 = _interopRequireDefault(require("./EventsCache/InMemory"));

var _Keys = _interopRequireDefault(require("./Keys"));

var _KeysLocalStorage = _interopRequireDefault(require("./KeysLocalStorage"));

var _constants = require("../utils/constants");

// This value might be eventually set via a config parameter
var DEFAULT_CACHE_EXPIRATION_IN_MILLIS = 864000000; // 10 days

exports.DEFAULT_CACHE_EXPIRATION_IN_MILLIS = DEFAULT_CACHE_EXPIRATION_IN_MILLIS;

var BrowserStorageFactory = function BrowserStorageFactory(context) {
  var settings = context.get(context.constants.SETTINGS);
  var storage = settings.storage;

  switch (storage.type) {
    case _constants.STORAGE_MEMORY:
      {
        var keys = new _Keys.default(settings);
        return {
          splits: new _InMemory.default(),
          segments: new _InMemory2.default(keys),
          impressions: new _InMemory3.default(),
          metrics: new _InMemory4.default(),
          count: new _InMemory5.default(),
          events: new _InMemory6.default(context),
          // When using shared instanciation with MEMORY we reuse everything but segments (they are customer per key).
          shared: function shared(settings) {
            var childKeyBuilder = new _Keys.default(settings);
            return {
              splits: this.splits,
              segments: new _InMemory2.default(childKeyBuilder),
              impressions: this.impressions,
              metrics: this.metrics,
              count: this.count,
              events: this.events,
              destroy: function destroy() {
                this.splits = new _InMemory.default();
                this.segments.flush();
              }
            };
          },
          destroy: function destroy() {
            this.splits.flush();
            this.segments.flush();
            this.impressions.clear();
            this.metrics.clear();
            this.count.clear();
            this.events.clear();
          }
        };
      }

    case _constants.STORAGE_LOCALSTORAGE:
      {
        var _keys = new _KeysLocalStorage.default(settings);

        var expirationTimestamp = Date.now() - DEFAULT_CACHE_EXPIRATION_IN_MILLIS;
        return {
          splits: new _InLocalStorage.default(_keys, expirationTimestamp, settings.sync.__splitFiltersValidation),
          segments: new _InLocalStorage2.default(_keys),
          impressions: new _InMemory3.default(),
          metrics: new _InMemory4.default(),
          count: new _InMemory5.default(),
          events: new _InMemory6.default(context),
          // When using shared instanciation with MEMORY we reuse everything but segments (they are customer per key).
          shared: function shared(settings) {
            var childKeysBuilder = new _KeysLocalStorage.default(settings);
            return {
              splits: this.splits,
              segments: new _InLocalStorage2.default(childKeysBuilder),
              impressions: this.impressions,
              metrics: this.metrics,
              count: this.count,
              events: this.events,
              destroy: function destroy() {
                this.splits = new _InMemory.default();
                this.segments = new _InMemory2.default(childKeysBuilder);
              }
            };
          },
          destroy: function destroy() {
            this.splits = new _InMemory.default();
            this.segments = new _InMemory2.default(new _Keys.default(settings));
            this.impressions.clear();
            this.metrics.clear();
            this.count.clear();
            this.events.clear();
          }
        };
      }

    default:
      throw new Error('Unsupported storage type');
  }
};

var _default = BrowserStorageFactory;
exports.default = _default;