"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _segmentChanges = _interopRequireDefault(require("../../services/segmentChanges"));

var _get = _interopRequireDefault(require("../../services/segmentChanges/get"));

var _timeTracker = _interopRequireDefault(require("../../utils/timeTracker"));

/**
Copyright 2016 Split Software

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
**/
function greedyFetch(settings, lastSinceValue, segmentName, metricCollectors, noCache) {
  return _timeTracker.default.start(_timeTracker.default.TaskNames.SEGMENTS_FETCH, metricCollectors, (0, _segmentChanges.default)((0, _get.default)(settings, {
    since: lastSinceValue,
    segmentName: segmentName
  }, noCache))) // no need to handle json parsing errors as SplitError, since errors are handled differently for segments
  .then(function (resp) {
    return resp.json();
  }).then(function (json) {
    var since = json.since,
        till = json.till;

    if (since === till) {
      return [json];
    } else {
      return Promise.all([json, greedyFetch(settings, till, segmentName, undefined, noCache)]).then(function (flatMe) {
        return [flatMe[0]].concat((0, _toConsumableArray2.default)(flatMe[1]));
      });
    }
  }).catch(function (err) {
    // If the operation is forbidden it may be due to permissions, don't recover and propagate the error.
    if (err.statusCode === 403) throw err; // if something goes wrong with the request to the server, we are going to
    // stop requesting information till the next round of downloading

    return [];
  });
} // @TODO migrate to a generator function and do the job incrementally


function segmentChangesFetcher(settings, segmentName, since, metricCollectors, noCache) {
  return greedyFetch(settings, since, segmentName, metricCollectors, noCache);
}

var _default = segmentChangesFetcher;
exports.default = _default;