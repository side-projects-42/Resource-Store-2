"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _findIndex = _interopRequireDefault(require("./findIndex"));

var _BaseMetricsAsyncCache = _interopRequireDefault(require("../BaseMetricsAsyncCache"));

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var LatencyCacheInRedis = /*#__PURE__*/function (_BaseMetricsAsyncCach) {
  (0, _inherits2.default)(LatencyCacheInRedis, _BaseMetricsAsyncCach);

  var _super = _createSuper(LatencyCacheInRedis);

  function LatencyCacheInRedis(keys, redis) {
    var _this;

    (0, _classCallCheck2.default)(this, LatencyCacheInRedis);
    _this = _super.call(this);
    _this.keys = keys;
    _this.redis = redis;
    return _this;
  }

  (0, _createClass2.default)(LatencyCacheInRedis, [{
    key: "track",
    value: function track(metricName, latency) {
      var bucketNumber = (0, _findIndex.default)(latency);
      return this.redis.incr(this.keys.buildLatencyKey(metricName, bucketNumber)).catch(function () {// noop, for telemetry metrics there's no need to throw.
      });
    }
  }]);
  return LatencyCacheInRedis;
}(_BaseMetricsAsyncCache.default);

var _default = LatencyCacheInRedis;
exports.default = _default;