"use strict";

function _interopDefault(ex) {
  return ex && "object" == typeof ex && "default" in ex ? ex.default : ex;
}

Object.defineProperty(exports, "__esModule", {
  value: !0
});

var _defineProperty = _interopDefault(require("@babel/runtime/helpers/defineProperty")), _objectWithoutPropertiesLoose = _interopDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose")), css = require("css"), chalk = _interopDefault(require("chalk"));

function defaultClassNameReplacer(className, index) {
  return "emotion-" + index;
}

var componentSelectorClassNamePattern = /^e[a-zA-Z0-9]+[0-9]+$/, replaceClassNames = function(classNames, styles, code, keys, classNameReplacer) {
  void 0 === classNameReplacer && (classNameReplacer = defaultClassNameReplacer);
  var index = 0, keyPattern = new RegExp("^(" + keys.join("|") + ")-");
  return classNames.reduce(function(acc, className) {
    if (keyPattern.test(className) || componentSelectorClassNamePattern.test(className)) {
      var escapedRegex = new RegExp(className.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&"), "g");
      return acc.replace(escapedRegex, classNameReplacer(className, index++));
    }
    return acc;
  }, styles + (styles ? "\n\n" : "") + code);
};

function flatMap(arr, iteratee) {
  var _ref;
  return (_ref = []).concat.apply(_ref, arr.map(iteratee));
}

var RULE_TYPES = {
  media: "media",
  rule: "rule"
};

function getClassNames(selectors, classes) {
  return classes ? selectors.concat(classes.split(" ")) : selectors;
}

function getClassNamesFromTestRenderer(selectors, _ref2) {
  var _ref2$props = _ref2.props, props = void 0 === _ref2$props ? {} : _ref2$props;
  return getClassNames(selectors, props.className || props.class);
}

function shouldDive(node) {
  return "function" == typeof node.dive && "string" != typeof node.type();
}

function isTagWithClassName(node) {
  return node.prop("className") && "string" == typeof node.type();
}

function getClassNamesFromEnzyme(selectors, node) {
  var components = (shouldDive(node) ? node.dive() : node).findWhere(isTagWithClassName);
  return getClassNames(selectors, components.length && components.first().prop("className"));
}

function getClassNamesFromCheerio(selectors, node) {
  return getClassNames(selectors, node.attr("class"));
}

function getClassNamesFromDOMElement(selectors, node) {
  return getClassNames(selectors, node.getAttribute("class"));
}

function isReactElement(val) {
  return val.$$typeof === Symbol.for("react.test.json");
}

function isEmotionCssPropElementType(val) {
  return val.$$typeof === Symbol.for("react.element") && val.type.$$typeof === Symbol.for("react.forward_ref") && "EmotionCssPropInternal" === val.type.displayName;
}

function isEmotionCssPropEnzymeElement(val) {
  return val.$$typeof === Symbol.for("react.test.json") && "EmotionCssPropInternal" === val.type;
}

var domElementPattern = /^((HTML|SVG)\w*)?Element$/;

function isDOMElement(val) {
  return 1 === val.nodeType && val.constructor && val.constructor.name && domElementPattern.test(val.constructor.name);
}

function isEnzymeElement(val) {
  return "function" == typeof val.findWhere;
}

function isCheerioElement(val) {
  return "[cheerio object]" === val.cheerio;
}

function getClassNamesFromNodes(nodes) {
  return nodes.reduce(function(selectors, node) {
    return isReactElement(node) ? getClassNamesFromTestRenderer(selectors, node) : isEnzymeElement(node) ? getClassNamesFromEnzyme(selectors, node) : isCheerioElement(node) ? getClassNamesFromCheerio(selectors, node) : getClassNamesFromDOMElement(selectors, node);
  }, []);
}

var keyframesPattern = /^@keyframes\s+(animation-[^{\s]+)+/, removeCommentPattern = /\/\*[\s\S]*?\*\//g, getElementRules = function(element) {
  var nonSpeedyRule = element.textContent;
  return nonSpeedyRule ? [ nonSpeedyRule ] : element.sheet ? [].slice.call(element.sheet.cssRules).map(function(cssRule) {
    return cssRule.cssText;
  }) : [];
};

function getStylesFromClassNames(classNames, elements) {
  if (!classNames.length) return "";
  var keys = getKeys(elements);
  if (!keys.length) return "";
  var keyPatten = new RegExp("^(" + keys.join("|") + ")-"), filteredClassNames = classNames.filter(function(className) {
    return keyPatten.test(className);
  });
  if (!filteredClassNames.length) return "";
  var selectorPattern = new RegExp("\\.(" + filteredClassNames.join("|") + ")"), keyframes = {}, styles = "";
  flatMap(elements, getElementRules).forEach(function(rule) {
    selectorPattern.test(rule) && (styles += rule);
    var match = rule.match(keyframesPattern);
    if (null !== match) {
      var name = match[1];
      void 0 === keyframes[name] && (keyframes[name] = ""), keyframes[name] += rule;
    }
  });
  var keyframeNameKeys = Object.keys(keyframes), keyframesStyles = "";
  if (keyframeNameKeys.length) {
    var keyframesNamePattern = new RegExp(keyframeNameKeys.join("|"), "g"), keyframesNameCache = {}, index = 0;
    styles = styles.replace(keyframesNamePattern, function(name) {
      return void 0 === keyframesNameCache[name] && (keyframesNameCache[name] = "animation-" + index++, 
      keyframesStyles += keyframes[name]), keyframesNameCache[name];
    }), keyframesStyles = keyframesStyles.replace(keyframesNamePattern, function(value) {
      return keyframesNameCache[value];
    });
  }
  return (keyframesStyles + styles).replace(removeCommentPattern, "");
}

function getStyleElements() {
  return Array.from(document.querySelectorAll("style[data-emotion]"));
}

var unique = function(arr) {
  return Array.from(new Set(arr));
};

function getKeys(elements) {
  return unique(elements.map(function(element) {
    return element.getAttribute("data-emotion");
  })).filter(Boolean);
}

function hasClassNames(classNames, selectors, target) {
  return selectors.some(function(selector) {
    return target ? target instanceof RegExp ? target.test(selector) : selector.includes(target) : classNames.includes(selector.slice(1));
  });
}

function getMediaRules(rules, media) {
  return rules.filter(function(rule) {
    var isMediaMatch = !!rule.media && rule.media.replace(/\s/g, "").includes(media.replace(/\s/g, ""));
    return rule.type === RULE_TYPES.media && isMediaMatch;
  }).reduce(function(mediaRules, mediaRule) {
    return mediaRules.concat(mediaRule.rules);
  }, []);
}

function isA(typeName, value) {
  return Object.prototype.toString.apply(value) === "[object " + typeName + "]";
}

function isAsymmetric(obj) {
  return obj && isA("Function", obj.asymmetricMatch);
}

function valueMatches(declaration, value) {
  return value instanceof RegExp ? value.test(declaration.value) : isAsymmetric(value) ? value.asymmetricMatch(declaration.value) : value === declaration.value;
}

function toHaveStyleRule(received, property, value, options) {
  void 0 === options && (options = {});
  var _options = options, target = _options.target, media = _options.media, classNames = getClassNamesFromNodes([ received ]), cssString = getStylesFromClassNames(classNames, getStyleElements()), preparedRules = css.parse(cssString).stylesheet.rules;
  media && (preparedRules = getMediaRules(preparedRules, media));
  var declaration = preparedRules.filter(function(rule) {
    return rule.type === RULE_TYPES.rule && hasClassNames(classNames, rule.selectors, target);
  }).reduce(function(decs, rule) {
    return decs.concat(rule.declarations);
  }, []).filter(function(dec) {
    return "declaration" === dec.type && dec.property === property;
  }).pop();
  if (!declaration) return {
    pass: !1,
    message: function() {
      return "Property not found: " + property;
    }
  };
  var pass = valueMatches(declaration, value);
  return {
    pass: pass,
    message: function() {
      return "Expected " + property + (pass ? " not " : " ") + "to match:\n  " + chalk.green(value) + "\nReceived:\n  " + chalk.red(declaration.value);
    }
  };
}

var matchers = {
  toHaveStyleRule: toHaveStyleRule
};

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(source, !0).forEach(function(key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(source).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}

function getNodes(node, nodes) {
  if (void 0 === nodes && (nodes = []), Array.isArray(node)) {
    var _iterator = node, _isArray = Array.isArray(_iterator), _i = 0;
    for (_iterator = _isArray ? _iterator : _iterator[Symbol.iterator](); ;) {
      var _ref;
      if (_isArray) {
        if (_i >= _iterator.length) break;
        _ref = _iterator[_i++];
      } else {
        if ((_i = _iterator.next()).done) break;
        _ref = _i.value;
      }
      getNodes(_ref, nodes);
    }
    return nodes;
  }
  if (node.children) {
    var _iterator2 = node.children, _isArray2 = Array.isArray(_iterator2), _i2 = 0;
    for (_iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator](); ;) {
      var _ref2;
      if (_isArray2) {
        if (_i2 >= _iterator2.length) break;
        _ref2 = _iterator2[_i2++];
      } else {
        if ((_i2 = _iterator2.next()).done) break;
        _ref2 = _i2.value;
      }
      getNodes(_ref2, nodes);
    }
  }
  return "object" == typeof node && nodes.push(node), nodes;
}

function getPrettyStylesFromClassNames(classNames, elements) {
  var prettyStyles, styles = getStylesFromClassNames(classNames, elements);
  try {
    prettyStyles = css.stringify(css.parse(styles));
  } catch (e) {
    throw console.error(e), new Error('There was an error parsing the following css: "' + styles + '"');
  }
  return prettyStyles;
}

function filterEmotionProps(props) {
  void 0 === props && (props = {});
  var _props = props, rest = (_props.css, _props.__EMOTION_TYPE_PLEASE_DO_NOT_USE__, 
  _props.__EMOTION_LABEL_PLEASE_DO_NOT_USE__, _objectWithoutPropertiesLoose(_props, [ "css", "__EMOTION_TYPE_PLEASE_DO_NOT_USE__", "__EMOTION_LABEL_PLEASE_DO_NOT_USE__" ]));
  return rest.css = "unknown styles", rest;
}

function createSerializer(_temp) {
  var _ref3 = void 0 === _temp ? {} : _temp, classNameReplacer = _ref3.classNameReplacer, _ref3$DOMElements = _ref3.DOMElements, DOMElements = void 0 === _ref3$DOMElements || _ref3$DOMElements, cache = new WeakSet();
  return {
    test: function(val) {
      return val && (!cache.has(val) && (isReactElement(val) || DOMElements && isDOMElement(val)) || isEmotionCssPropEnzymeElement(val) || isEmotionCssPropElementType(val));
    },
    print: function(val, printer) {
      if (isEmotionCssPropEnzymeElement(val)) return val.children.map(printer).join("\n");
      if (isEmotionCssPropElementType(val)) return printer(_objectSpread({}, val, {
        props: filterEmotionProps(val.props),
        type: val.props.__EMOTION_TYPE_PLEASE_DO_NOT_USE__
      }));
      var nodes = getNodes(val), classNames = getClassNamesFromNodes(nodes), elements = getStyleElements(), styles = getPrettyStylesFromClassNames(classNames, elements);
      nodes.forEach(cache.add, cache);
      var printedVal = printer(val);
      nodes.forEach(cache.delete, cache);
      var keys = getKeys(elements);
      return replaceClassNames(classNames, styles, printedVal, keys, classNameReplacer);
    }
  };
}

var _createSerializer = createSerializer(), print = _createSerializer.print, test = _createSerializer.test, index = {
  print: print,
  test: test
};

exports.createSerializer = createSerializer, exports.default = index, exports.matchers = matchers, 
exports.print = print, exports.test = test;
