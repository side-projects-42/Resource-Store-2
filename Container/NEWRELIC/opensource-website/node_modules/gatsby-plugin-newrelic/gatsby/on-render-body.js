"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireDefault(require("react"));

var _latest = require("../browser-agents/latest");

var _default = function _default(_ref, pluginOptions) {
  var setHeadComponents = _ref.setHeadComponents;
  var userConfigs = pluginOptions.configs;
  var requiredConfigs = {
    accountId: '',
    trustKey: '',
    agentID: '',
    licenseKey: '',
    applicationID: '',
    beacon: 'bam.nr-data.net',
    errorBeacon: 'bam.nr-data.net',
    instrumentationType: 'lite' // Options are 'lite', 'pro', 'proAndSPA'

  };
  var env = process.env.GATSBY_NEWRELIC_ENV;

  if (!env) {
    // TO DO - Error/Warn about envVariable not being set
    console.warn('GATSBY_NEWRELIC_ENV env variable is not set');
    return;
  }

  var userEnvConfig = userConfigs[env] ? userConfigs[env] : userConfigs;

  if (!userEnvConfig) {
    // TO DO - Error/Warn about missing config option for a given env
    console.warn('gatsby-plugin-newrelic is missing the configuration for the ' + env + ' environment');
    return;
  }

  var allowedInstrumentationTypes = ['lite', 'pro', 'proAndSPA'];
  var itExists = allowedInstrumentationTypes.find(function (i) {
    return i === userEnvConfig.instrumentationType;
  });

  if (!itExists) {// TO DO - Error/Warn about wrong instrumentation type
  }

  var options = (0, _extends2["default"])({}, requiredConfigs, userEnvConfig);
  var instrumentationType = options.instrumentationType;
  var emptyOptions = Object.entries(options).filter(function (_ref2) {
    var v = _ref2[1];
    return v === '';
  });

  if (emptyOptions.length > 0) {// TO DO - Warn about missing options
  }

  var agent;

  if (instrumentationType === 'lite') {
    agent = _latest.liteAgent;
  }

  if (instrumentationType === 'pro') {
    agent = _latest.proAgent;
  }

  if (instrumentationType === 'proAndSPA') {
    agent = _latest.proAndSpaAgent;
  }

  var configs = "\n    ;NREUM.loader_config={accountID:\"" + options.accountId + "\",trustKey:\"" + options.trustKey + "\",agentID:\"" + options.agentID + "\",licenseKey:\"" + options.licenseKey + "\",applicationID:\"" + options.applicationID + "\"}\n    ;NREUM.info={beacon:\"" + options.beacon + "\",errorBeacon:\"" + options.errorBeacon + "\",licenseKey:\"" + options.licenseKey + "\",applicationID:\"" + options.applicationID + "\",sa:1}\n  ";

  if (agent && configs) {
    setHeadComponents([/*#__PURE__*/_react["default"].createElement("script", {
      key: "gatsby-plugin-newrelic",
      dangerouslySetInnerHTML: {
        __html: agent + configs
      }
    })]);
  }
};

exports["default"] = _default;