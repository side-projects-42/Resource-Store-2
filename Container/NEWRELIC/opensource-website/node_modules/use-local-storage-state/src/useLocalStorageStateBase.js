"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const storage_1 = require("./storage");
const react_1 = require("react");
function useLocalStorageStateBase(key, defaultValue) {
    // we don't support updating the `defaultValue` the same way `useState()` doesn't support it
    const [defaultValueState] = react_1.useState(() => {
        const isCallable = (value) => typeof value === 'function';
        return isCallable(defaultValue) ? defaultValue() : defaultValue;
    });
    const getDefaultState = react_1.useCallback(() => {
        return {
            value: storage_1.default.get(key, defaultValueState),
            isPersistent: (() => {
                /**
                 * We want to return `true` on the server. If you render a message based on `isPersistent` and the
                 * server returns `false` then the message will flicker until hydration is done:
                 * `{!isPersistent && <span>You changes aren't being persisted.</span>}`
                 */
                if (typeof window === 'undefined') {
                    return true;
                }
                try {
                    localStorage.setItem('__ulss', '#');
                    localStorage.removeItem('__ulss');
                    return true;
                }
                catch (_a) {
                    return false;
                }
            })(),
        };
    }, [defaultValueState, key]);
    const [state, setState] = react_1.useState(getDefaultState);
    const updateValue = react_1.useMemo(() => {
        const fn = (newValue) => {
            const isCallable = (value) => typeof value === 'function';
            if (isCallable(newValue)) {
                setState((state) => ({
                    value: newValue(state.value),
                    isPersistent: storage_1.default.set(key, newValue(state.value)),
                }));
            }
            else {
                setState({
                    value: newValue,
                    isPersistent: storage_1.default.set(key, newValue),
                });
            }
        };
        fn.reset = () => {
            storage_1.default.remove(key);
            setState((state) => ({
                value: defaultValueState,
                isPersistent: state.isPersistent,
            }));
        };
        return fn;
    }, [key, defaultValueState]);
    /**
     * Syncs changes across tabs and iframe's.
     */
    react_1.useEffect(() => {
        const onStorage = (e) => {
            if (e.storageArea === localStorage && e.key === key) {
                setState({
                    value: storage_1.default.get(key, defaultValueState),
                    isPersistent: true,
                });
            }
        };
        window.addEventListener('storage', onStorage);
        return () => window.removeEventListener('storage', onStorage);
    }, [key, defaultValueState]);
    /**
     * Update the state when the `key` property changes.
     */
    const isFirstRender = react_1.useRef(true);
    react_1.useEffect(() => {
        if (isFirstRender.current) {
            isFirstRender.current = false;
            return;
        }
        setState(getDefaultState());
    }, [getDefaultState]);
    return [state.value, updateValue, state.isPersistent];
}
exports.default = useLocalStorageStateBase;
