name: Project-Stats CI

on:
  schedule:
    - cron: '0 */4 * * *' # every 4 hours
  repository_dispatch:
    types: [sync-project-data]

env:
  THIRD_PARTY_GIT_AUTHOR_EMAIL: opensource+bot@newrelic.com
  THIRD_PARTY_GIT_AUTHOR_NAME: nr-opensource-bot

jobs:
  job-sync-project-data:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2.3.0
        with:
          ref: develop
          fetch-depth: 0
          token: ${{ secrets.OPENSOURCE_BOT_TOKEN }}

      - name: Sync Data
        uses: ./.github/actions/sync-data
        with:
          github-token: ${{ secrets.NEWRELIC_BOT_TOKEN }} # must have push access to repos for stats queries to work
          project-stats: true

      - name: Temporarily disable branch protection
        id: disable-branch-protection
        uses: actions/github-script@v1
        with:
          github-token: ${{ secrets.OPENSOURCE_BOT_TOKEN }}
          previews: luke-cage-preview
          script: |
            const result = await github.repos.updateBranchProtection({
              owner: context.repo.owner,
              repo: context.repo.repo,
              branch: 'develop',
              required_status_checks: null,
              restrictions: null,
              enforce_admins: null,
              required_pull_request_reviews: null
            })
            console.log("Result:", result)

      - name: Commit data files
        run: |
          git config --local user.email "${{ env.THIRD_PARTY_GIT_AUTHOR_EMAIL }}"
          git config --local user.name "${{ env.THIRD_PARTY_GIT_AUTHOR_NAME }}"

          # develop could have been modified since we checked out, so pull before pushing
          git pull --ff-only origin develop

          echo "Updated project data files -- committing"
          git add src/data
          git commit -m "chore(stats): updated project stats files"

          # Push to both develop and main here rather than using github-push-action
          echo "Pushing to develop"
          git push origin develop
          CHERRYCOMMIT=`git log -n1 | head -n1 | cut -c8-`

          echo "Pushing to main"
          git checkout main
          git pull --ff-only origin main
          git cherry-pick $CHERRYCOMMIT
          git push origin main

      - name: Re-enable branch protection
        id: enable-branch-protection
        if: always()
        uses: actions/github-script@v1
        with:
          github-token: ${{ secrets.OPENSOURCE_BOT_TOKEN }}
          previews: luke-cage-preview
          script: |
            const result = await github.repos.updateBranchProtection({
              owner: context.repo.owner,
              repo: context.repo.repo,
              branch: 'develop',
              required_status_checks: null,
              restrictions: {
                users: [],
                teams: []
              },
              enforce_admins: true,
              required_pull_request_reviews: {
                dismiss_stale_reviews: true,
                required_approving_review_count: 1
              }
            })
            console.log("Result:", result)

  job-checkout-and-build:
    runs-on: ubuntu-latest
    needs: job-sync-project-data
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2.3.0

      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 12

      - name: Cache node_modules
        id: cache-node
        uses: actions/cache@v2
        env:
          cache-name: node-modules
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-${{ env.cache-name }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.cache-name }}-

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Gatsby Build
        run: |
          if [ '${{ github.ref }}' = 'refs/heads/develop' ]; then
            yarn run build:staging
          elif [ '${{ github.ref }}' = 'refs/heads/main' ]; then
            yarn run build:production
          else
            echo "::error::Running on unsupported branch. Exiting."
            exit 1
          fi

#############################################################################################################
## Note: Removing the webhook-driven deployment (for now) in favor of utilizing auto-builds on Amplify
#############################################################################################################
# job-deploy-staging:
#   runs-on: ubuntu-latest
#   needs: [job-sync-project-data, job-checkout-and-build]
#   env:
#     STAGING_WEBHOOK: ${{ secrets.AMPLIFY_STAGING_WEBHOOK }}
#   steps:
#     - name: Call Amplify Staging Deploy
#       run: |
#         echo "Calling Amplify staging webhook"
#         curl --silent --show-error --output /dev/null -X POST $STAGING_WEBHOOK -H "Content-Type:application/json"
#         echo "**OUTPUT SUPPRESSED**"
#         echo "Webhook call complete"
# job-deploy-prod:
#   runs-on: ubuntu-latest
#   needs: [job-sync-project-data, job-checkout-and-build]
#   env:
#     PROD_WEBHOOK: ${{ secrets.AMPLIFY_PROD_WEBHOOK }}
#   steps:
#     - name: Call Amplify Prod Deploy
#       run: |
#         echo "Calling Amplify prod webhook"
#         curl --silent --show-error --output /dev/null -X POST $PROD_WEBHOOK -H "Content-Type:application/json"
#         echo "**OUTPUT SUPPRESSED**"
#         echo "Webhook call complete"
