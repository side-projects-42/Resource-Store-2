//
// MHVTaskTrackingApi.m
// MHVLib
//
// Copyright (c) 2017 Microsoft Corporation. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

/**
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/


#import <Foundation/Foundation.h>
#import "MHVRemoteMonitoringClient.h"
#import "MHVJsonSerializer.h"
#import "MHVTaskTrackingApi.h"
#import "MHVErrorResponse.h"
#import "MHVTaskTrackingOccurrence.h"


@implementation MHVRemoteMonitoringClient (MHVTaskTrackingApi)

NSString* _Nonnull kMHVTaskTrackingApiErrorDomain = @"MHVTaskTrackingApiErrorDomain";
NSInteger kMHVTaskTrackingApiMissingParamErrorCode = 234513;

#pragma mark - Api Methods

///
/// Delete a task tracking occurrence
/// 
///  @param occurrenceId The task tracking occurrence id. 
/// 
- (void)taskTrackingDeleteWithOccurrenceId:(NSString* _Nonnull)occurrenceId
    completion:(void(^_Nonnull)(NSNumber* _Nullable output, NSError* _Nullable error))completion
{
    // verify the required parameter 'occurrenceId' is set
    if (occurrenceId == nil)
    {
        NSParameterAssert(occurrenceId);
        if(completion)
        {
            NSDictionary * userInfo = @{NSLocalizedDescriptionKey : [NSString stringWithFormat:NSLocalizedString(@"Missing required parameter '%@'", nil),@"occurrenceId"] };
            NSError* error = [NSError errorWithDomain:kMHVTaskTrackingApiErrorDomain code:kMHVTaskTrackingApiMissingParamErrorCode userInfo:userInfo];
            completion(nil, error);
        }

        return;
    }

    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/TaskTracking/{occurrenceId}"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];
    if (occurrenceId != nil)
    {
        pathParams[@"occurrenceId"] = occurrenceId;
    }

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];

    NSData *bodyParam = nil;

    [self requestWithPath:resourcePath
                      httpMethod:@"DELETE"
                      pathParams:pathParams
                     queryParams:queryParams
                            body:bodyParam
                     resultClass:[NSNumber class]
                      completion:completion];
}

///
/// Patch an task tracking occurrence
/// 
///  @param occurrenceId The task tracking occurrence id. 
///  @param taskTrackingOccurrence The plan task tracking occurrence. 
/// 
- (void)taskTrackingPatchWithOccurrenceId:(NSString* _Nonnull)occurrenceId
    taskTrackingOccurrence:(MHVTaskTrackingOccurrence* _Nonnull)taskTrackingOccurrence
    completion:(void(^_Nonnull)(MHVTaskTrackingOccurrence* _Nullable output, NSError* _Nullable error))completion
{
    // verify the required parameter 'occurrenceId' is set
    if (occurrenceId == nil)
    {
        NSParameterAssert(occurrenceId);
        if(completion)
        {
            NSDictionary * userInfo = @{NSLocalizedDescriptionKey : [NSString stringWithFormat:NSLocalizedString(@"Missing required parameter '%@'", nil),@"occurrenceId"] };
            NSError* error = [NSError errorWithDomain:kMHVTaskTrackingApiErrorDomain code:kMHVTaskTrackingApiMissingParamErrorCode userInfo:userInfo];
            completion(nil, error);
        }

        return;
    }

    // verify the required parameter 'taskTrackingOccurrence' is set
    if (taskTrackingOccurrence == nil)
    {
        NSParameterAssert(taskTrackingOccurrence);
        if(completion)
        {
            NSDictionary * userInfo = @{NSLocalizedDescriptionKey : [NSString stringWithFormat:NSLocalizedString(@"Missing required parameter '%@'", nil),@"taskTrackingOccurrence"] };
            NSError* error = [NSError errorWithDomain:kMHVTaskTrackingApiErrorDomain code:kMHVTaskTrackingApiMissingParamErrorCode userInfo:userInfo];
            completion(nil, error);
        }

        return;
    }

    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/TaskTracking/{occurrenceId}"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];
    if (occurrenceId != nil)
    {
        pathParams[@"occurrenceId"] = occurrenceId;
    }

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];

    NSData *bodyParam = nil;
    NSString *json = [MHVJsonSerializer serialize:taskTrackingOccurrence];
    bodyParam = [json dataUsingEncoding:NSUTF8StringEncoding];

    [self requestWithPath:resourcePath
                      httpMethod:@"PATCH"
                      pathParams:pathParams
                     queryParams:queryParams
                            body:bodyParam
                     resultClass:[MHVTaskTrackingOccurrence class]
                      completion:completion];
}

///
/// Post a task tracking
/// 
///  @param taskTrackingOccurrence The plan task tracking occurrence. 
/// 
- (void)taskTrackingPostWithTaskTrackingOccurrence:(MHVTaskTrackingOccurrence* _Nonnull)taskTrackingOccurrence
    completion:(void(^_Nonnull)(MHVTaskTrackingOccurrence* _Nullable output, NSError* _Nullable error))completion
{
    // verify the required parameter 'taskTrackingOccurrence' is set
    if (taskTrackingOccurrence == nil)
    {
        NSParameterAssert(taskTrackingOccurrence);
        if(completion)
        {
            NSDictionary * userInfo = @{NSLocalizedDescriptionKey : [NSString stringWithFormat:NSLocalizedString(@"Missing required parameter '%@'", nil),@"taskTrackingOccurrence"] };
            NSError* error = [NSError errorWithDomain:kMHVTaskTrackingApiErrorDomain code:kMHVTaskTrackingApiMissingParamErrorCode userInfo:userInfo];
            completion(nil, error);
        }

        return;
    }

    NSMutableString* resourcePath = [NSMutableString stringWithFormat:@"/TaskTracking"];

    NSMutableDictionary *pathParams = [[NSMutableDictionary alloc] init];

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];

    NSData *bodyParam = nil;
    NSString *json = [MHVJsonSerializer serialize:taskTrackingOccurrence];
    bodyParam = [json dataUsingEncoding:NSUTF8StringEncoding];

    [self requestWithPath:resourcePath
                      httpMethod:@"POST"
                      pathParams:pathParams
                     queryParams:queryParams
                            body:bodyParam
                     resultClass:[MHVTaskTrackingOccurrence class]
                      completion:completion];
}



@end
