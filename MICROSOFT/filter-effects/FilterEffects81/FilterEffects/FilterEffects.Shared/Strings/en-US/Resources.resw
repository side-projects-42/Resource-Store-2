<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="About.Text" xml:space="preserve">
    <value>About</value>
  </data>
  <data name="AboutButton.Label" xml:space="preserve">
    <value>about</value>
  </data>
  <data name="AboutDescription.Text" xml:space="preserve">
    <value>An example application demonstrating the use of the different filters of Imaging SDK with camera photos. This example app uses the camera and displays the viewfinder for taking a picture. The taken photo is then processed with the predefined filters. The filter properties can be manipulated and the changes can be seen in the preview image immediately. The processed image can be saved in JPEG format to the device. You can also select an existing photo and apply an effect to it.</value>
  </data>
  <data name="AboutDisclaimer.Text" xml:space="preserve">
    <value>This example application has been created to provide tips and best practice guidance for software developers and app designers, and may not have all the features you would expect in a commercial product. This application is published in Store as a free software as it may also have value to regular phone users. The source code and documentation of this example can be downloaded from web.</value>
  </data>
  <data name="AboutMore.Text" xml:space="preserve">
    <value>Learn more and get the latest version of this software from:</value>
  </data>
  <data name="AboutPage.Text" xml:space="preserve">
    <value>About</value>
  </data>
  <data name="Application.Text" xml:space="preserve">
    <value>Filter Effects</value>
  </data>
  <data name="ApplicationTitle.Text" xml:space="preserve">
    <value>Filter Effects</value>
  </data>
  <data name="Brightness.Text" xml:space="preserve">
    <value>Brightness</value>
  </data>
  <data name="CameraInitializationFailed.Text" xml:space="preserve">
    <value>Failed to start the camera</value>
  </data>
  <data name="Cancel.Text" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="CaptureButton.Label" xml:space="preserve">
    <value>Capture</value>
  </data>
  <data name="Color.Text" xml:space="preserve">
    <value>Color</value>
  </data>
  <data name="DistinctEdges.Text" xml:space="preserve">
    <value>Distinct edges</value>
  </data>
  <data name="FailedToFindCameraDevice.Text" xml:space="preserve">
    <value>Failed to find a camera device</value>
  </data>
  <data name="FailedToSaveImage.Text" xml:space="preserve">
    <value>Failed to save the image</value>
  </data>
  <data name="FilterSettingsHint.Text" xml:space="preserve">
    <value>Tap the image to adjust the filter settings.</value>
  </data>
  <data name="Gray.Text" xml:space="preserve">
    <value>Gray</value>
  </data>
  <data name="High.Text" xml:space="preserve">
    <value>High</value>
  </data>
  <data name="ImageSavedAs.Text" xml:space="preserve">
    <value>Image saved as</value>
  </data>
  <data name="InitializingCamera.Text" xml:space="preserve">
    <value>Initializing camera...</value>
  </data>
  <data name="LomoVignetting.Text" xml:space="preserve">
    <value>Vignetting</value>
  </data>
  <data name="Low.Text" xml:space="preserve">
    <value>Low</value>
  </data>
  <data name="Medium.Text" xml:space="preserve">
    <value>Medium</value>
  </data>
  <data name="NoiseSuppression.Text" xml:space="preserve">
    <value>Noise suppression</value>
  </data>
  <data name="Preview.Text" xml:space="preserve">
    <value>Preview</value>
  </data>
  <data name="PreviewPivot.Title" xml:space="preserve">
    <value>Filter preview</value>
  </data>
  <data name="Retry.Text" xml:space="preserve">
    <value>Retry</value>
  </data>
  <data name="Saturation.Text" xml:space="preserve">
    <value>Saturation</value>
  </data>
  <data name="SaveButton.Label" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="Saving.Text" xml:space="preserve">
    <value>Saving...</value>
  </data>
  <data name="SelectImageButton.Label" xml:space="preserve">
    <value>Select image</value>
  </data>
  <data name="SketchMode.Text" xml:space="preserve">
    <value>Sketch mode</value>
  </data>
  <data name="Strength.Text" xml:space="preserve">
    <value>Strength</value>
  </data>
  <data name="VersionNumber.Text" xml:space="preserve">
    <value>Version {0}</value>
  </data>
</root>
