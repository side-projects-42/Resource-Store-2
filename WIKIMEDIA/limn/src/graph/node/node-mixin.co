op = require 'operator'
ko = require 'knockout'

{ _, compareIds, Mixin,
} = require '../../util'



/**
 * @class Functionality common to both GraphNode and GraphNodeData.
 * @extends Mixin
 */
class exports.NodeMixin extends Mixin
    
    # Requires mixing class (which we'll call `Node`) implement several
    # observables:
    #   - `children`: Array<Node>
    #   - `parent`: Node
    
    
    /**
     * Whether this node is alive or has been marked for deletion.
     * @type ko.observable<Boolean>
     */
    isDisposed : ko.observable false
    
    
    
    /**
     * Called by GraphNode and GraphNodeData in the constructor to allow the
     * mixin to perform initialization.
     * 
     * @protected
     * @returns {this}
     */
    initMixin: ->
        @parent   .= history({ -includeInitial })
        @children  = @attributes.children = @children.history({ -includeInitial })
        @parent.equalityComparer = @children.equalityComparer = compareIds
        this
    
    
    /**
     * Call when disposing of this node.
     * @returns {this}
     */
    dispose: ->
        return this if @isDisposed.peek()
        @isDisposed true
        @trigger 'dispose', this
        this
    
    
    
    /* * * *  Tree Operations  * * * {{{ */
    
    
    /**
     * Performs a depth-first walk across the tree of nodes, invoking an
     * iteration function much like  `Array.reduce`, passing a custom "accumulator"
     * value along with the current node:
     * 
     *  `newAcc = fn.call(context || node, currentAcc, node, childIndex)`
     * 
     * The function's return becomes the new accumulator. If not specified, the
     * function will be invoked with the node as the context.
     * 
     * @param {*} acc Starting accumulator value.
     * @param {Object} [context] Execution context for the iteration function.
     * @param {Function} fn Iteration function passed the current accumulator and current node.
     * @returns {*} Final accumulator value.
     */
    walk: (acc, cxt, fn, idx=null) ->
        [fn, cxt] = [cxt, null] unless typeof fn is 'function'
        acc = fn.call(cxt or this, acc, this, idx)
        for childNode, childIdx of @children().slice()
            acc = childNode.walk acc, cxt, fn, childIdx
        acc
    
    
    /**
     * Performs a walk up the tree through this node's parents (but including
     * this node), invoking an iteration function much like  `Array.reduce`,
     * passing a custom "accumulator" value along with the current node:
     * 
     *  `newAcc = fn.call(context || node, currentAcc, node, distanceFromStart)`
     * 
     * Where `distanceFromStart` is the equivalent to the parent "index",
     * starting at 0 and incrementing each step up the tree. The function's
     * return becomes the new accumulator. If not specified, the function
     * will be invoked with the node as the context.
     * 
     * @param {*} acc Starting accumulator value.
     * @param {Object} [context] Execution context for the iteration function.
     * @param {Function} fn Iteration function passed the current accumulator and current node.
     * @returns {*} Final accumulator value.
     */
    walkUp: (acc, cxt, fn, idx=0) ->
        [fn, cxt] = [cxt, null] unless typeof fn is 'function'
        acc = fn.call(cxt or this, acc, this, idx)
        return acc unless parent = @parent()
        parent.walkUp acc, cxt, fn, idx+1
    
    
    /**
     * As `Array.map()` but walking the tree of nodes.
     * Mapping function invoked with:
     * 
     *  `fn.call(context || node, node, childIndex) -> newValue`
     * 
     * @param {Object} [context] Execution context for the mapping function.
     * @param {Function} fn Mapping function.
     * @returns {Array} Mapped children.
     */
    map: (cxt, fn) ->
        [fn, cxt] = [cxt, null] unless typeof fn is 'function'
        @walk [], cxt, (acc, node, childIdx) ->
            acc.push fn.call this, node, childIdx
            acc
    
    
    /**
     * As `Array.filter()` but walking the tree of nodes.
     * Filter function invoked with:
     * 
     *  `fn.call(context || node, node, childIndex) -> Boolean`
     * 
     * @param {Object} [context] Execution context for the filter function.
     * @param {Function} fn Filter function.
     * @returns {Array<Node>} Matching children.
     */
    filter: (cxt, fn) ->
        [fn, cxt] = [cxt, null] unless typeof fn is 'function'
        @walk [], cxt, (acc, node, childIdx) ->
            acc.push node if fn.call this, node, childIdx
            acc
    
    
    /**
     * Performs a depth-first walk across the tree of nodes, returning the first
     * node for which the predicate function is truthy. Predicate will be invoked
     * with:
     * 
     *  `fn.call(context || node, node, childIndex) -> Boolean`
     * 
     * @param {Object} [context] Execution context for the predicate function.
     * @param {Function} fn Predicate function.
     * @returns {Node|null} First matching node, or `null` if none match.
     */
    find: (cxt, fn, idx=null) ->
        [fn, cxt] = [cxt, null] unless typeof fn is 'function'
        return this if fn.call(cxt or this, this, idx)
        for childNode, childIdx of @children().slice()
            return that if childNode.find cxt, fn, childIdx
        null
    
    
    /**
     * Performs a walk up the tree through this node's parents (but including
     * this node), returning the first node for which the predicate function
     * is truthy. Predicate will be invoked with:
     * 
     *  `fn.call(context || node, node, distanceFromStart) -> Boolean`
     * 
     * Where `distanceFromStart` is the equivalent to the parent "index",
     * starting at 0 and incrementing each step up the tree.
     * 
     * @param {Object} [context] Execution context for the predicate function.
     * @param {Function} fn Predicate function.
     * @returns {Node|null} First matching parent, or `null` if none match.
     */
    findUp: (cxt, fn, idx=0) ->
        [fn, cxt] = [cxt, null] unless typeof fn is 'function'
        return this if fn.call(cxt or this, this, idx)
        return null unless parent = @parent()
        parent.findUp cxt, fn, idx+1
    
    
    pluck: (prop, peek) ->
        unwrap = if peek then ko.utils.peekObservable else op.I
        @map (node) -> unwrap node[prop]
    
    
    invoke: (method, ...args) ->
        @map (node) -> node[method]?.apply node, args
    
    
    # }}}
    
    

