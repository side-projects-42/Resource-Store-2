_  = require 'underscore'
ko = require 'knockout'
d3 = require 'd3'

{ GraphNodeData,
} = require '../graph-node-data'
{ GraphNode,
} = require '../graph-node'

Trait = require '../graph-node-trait'



/**
 * @class
 * @extends GraphNodeData
 */
class exports.AnnotationNodeData extends GraphNodeData
    @registerType 'annotation'
    
    defaults: ->
        x: 0
        y: 0
        options:
            label   : null
            desc    : null
            width   : 16
            height  : 16
    
    attributeTypes: ->
        x: (x) ->
            ret = new Date(x)
            if ret == 'Invalid Date'
                ret = x
            ret
        y: parseInt
    
    -> super ...



/**
 * @class
 * @extends GraphNode
 */
class exports.AnnotationNode extends GraphNode
    @registerType 'annotation'
    traits : [
        Trait.VIS_NODE
        Trait.SVG
        Trait.LEAF
    ]
    
    
    ->
        super ...
        @trackHover()
    
    trackHover: @computed ->
        return unless cursor = @root().cursor()
        return unless @rect and @popup
        
        if cursor.hovering
            dx = Math.abs(cursor.x - @rect.attr('x'))
            dy = Math.abs(cursor.y - @rect.attr('y'))
            if dx < @options().width() and dy < @options().height()
                @rect.style 'fill', 'black'
                @popup.style 'visibility', 'visible'
            else
                @rect.style 'fill', 'white'
                @popup.style 'visibility', 'hidden'
    
    
    disabled: -> false # TODO: link to parent's disabled
    
    
    /**
     * Update selection representing the SVG path element for the annotation.
     * @type ko.computed<d3.selection.update>
     */
    render: ->
        viewport = @viewport()
        return null unless model  = @model()
        return null unless xScale = viewport.xScale()
        return null unless yScale = viewport.yScale()
        return null if @disabled()
        
        width = model.options().width()
        height = model.options().height()
        
        # TODO: move CSS out to stylesheet
        unless @rect
            @rect = @sel.append 'rect'
                .classed 'metric-annotation', true
                .style 'fill', 'white'
                .style 'stroke', 'black'
                .attr 'width', width
                .attr 'height', height
            
            @popup = @sel.append 'g'
                .classed 'metric-annotation-box', true
                .style 'visibility', 'hidden'
            
            @popup.append 'rect'
                .style 'fill', '#fee'
                .style 'stroke', 'black'
            
            @popup.append 'text'
                .style 'text-anchor', 'left'
        
        x = xScale(model.x()) - width / 2
        y = yScale(model.y()) - height / 2
        
        @rect.transition()
            .attr 'x', x
            .attr 'y', y
        @popup.selectAll('text').remove()
        textLines = @note().split('\n')
        _.each textLines, (text, index) ~>
            @popup.append 'text'
                .text text
                .transition()
                    .attr 'x', x + width
                    .attr 'y', y + height + index*16
        rectSize = @popup.node().getBBox()
        @popup.select('rect').transition()
            .attr 'x', x
            .attr 'y', y
            .attr 'width', rectSize.width + width*2
            .attr 'height', textLines.length*16 + height
