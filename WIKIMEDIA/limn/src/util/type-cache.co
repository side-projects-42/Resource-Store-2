_  = require 'underscore'
ko = require 'knockout'
{
    unwrapObservable : unwrap
    peekObservable   : peek
} = ko.utils



/**
 * @class Tracks classes by some identifier, useful for mapping known subtypes.
 */
class exports.TypeCache
    
    /**
     * Map holding the cached values.
     * @private
     * @type Map<id, Model>
     */
    cache: null
    
    
    
    /**
     * @constructor
     * @param {String} [typeKey='type'] Key of the ID property to lookup on
     *  instances when an ID is not supplied.
     * @param {Object} [cache={}] Cache object to use.
     */
    (@typeKey='type', @cache={}) ->
    
    
    
    /**
     * @param {String|Class} id ID to test, or a class to extract an ID from.
     * @returns {Boolean} Whether the cache has an object at this ID.
     */
    has: (id) ->
        if typeof id is 'function'
            Subclass = id
            id = Subclass::[@typeKey] if _.has(Subclass?::, @typeKey)
        id and @cache[id]
    
    /**
     * Register a new type. On subclasses of a root type, call this
     * method *after* setting their `typeKey`:
     * 
     *  cache = new TypeCache 'nodeType'
     *  class AnotherGraphNode extends GraphNode
     *      cache.add 'another', this
     *      -> super ...
     * 
     * @param {String|Class} [id] ID to cache Subclass under. If omitted, it
     *  will be inferred from the Subclass using `typeKey`.
     * @param {Class} Subclass Subclass to register.
     * @returns {Class} The Subclass.
     */
    add: (id, Subclass) ->
        # console.log "#this.registerType(#Subclass)"
        if not Subclass and typeof id is 'function'
            [Subclass, id] = [id, null]
        unless id or ( _.has(Subclass?::, @typeKey) and id = Subclass::[@typeKey] )
            throw new Error "Sub-types must declare a new, unique #{@typeKey} on the prototype! (got #{id or Subclass?::?[@typeKey]})"
        if @cache[id] and @cache[id] is not Subclass
            throw new Error "Duplicate #{@typeKey}! (got #id)"
        unless _.has(Subclass?::, @typeKey) and Subclass::[@typeKey]
            Subclass::[@typeKey] = id
        @cache[id] = Subclass
    
    
    /**
     * Synchronously check if a model is in the cache, returning it if so.
     * 
     * @param {String} id The type ID to get.
     * @returns {Class}
     */
    get: (id) ->
        @cache[id]
    
    
    /**
     * Look up type by `id`.
     * 
     * @param {Object} obj 
     * @returns {this} 
     */
    lookup: (obj) ->
        id = obj
        id = _.get obj, @typeKey unless typeof id is 'string'
        id = peek id
        unless Type = @cache[id]
            throw new Error "No type registered for #{@typeKey}='#id'!"
        Type
    
    
    # fromData: (obj) ->
    #     return null unless obj
    #     Type = @lookup obj
    #     new Type obj
    
    
    /**
     * Invalidate a model, removing it from the cache.
     * 
     * @param {String} id ID of the model to invalidate.
     * @returns {this}
     */
    invalidate: (id) ->
        return this unless id?
        delete @cache[id]
        this
    
    
    /**
     * Invalidates all cache entries.
     * @returns {this}
     */
    purge: ->
        _.each _.keys(@cache), @invalidate, this
        this
    
    
    /**
     * Decorate an object with the cache methods:
     *  - hasType        -> TypeCache::has
     *  - registerType   -> TypeCache::add
     *  - lookupType     -> TypeCache::lookup
     *  - invalidateType -> TypeCache::invalidate
     *  - purgeCache     -> TypeCache::purge
     * 
     * @param {Object} obj Object to decorate.
     * @param {Object} [mapping] Object mapping dest->src names for cache methods.
     * @returns {obj} The supplied object.
     */
    decorate: (target, mapping={}) ->
        cache = this
        target.__cache__ or= cache
        
        mapping = {
            hasType        : 'has'
            registerType   : 'add'
            lookupType     : 'lookup'
            # fromData       : 'fromData'
            invalidateType : 'invalidate'
            purgeCache     : 'purge'
        } import mapping
        
        for dest, src in mapping
            # if target is a class, let registerType default to current subclass
            if dest is 'registerType' and typeof target is 'function'
                target.registerType or= (id, Subclass=this) ->
                    cache.add id, Subclass
            # Bind the Cache methods to the class
            else
                target[dest] or= @[src].bind cache
        
        target
    
    
    /**
     * Creates a new TypeCache for a given class `Type`, and decorates it
     * with cache methods as statics.
     * 
     * @see TypeCache#decorate
     * @param {Class} Type Class to decorate.
     * @param {String} typeKey Key used to infer missing IDs.
     * @param {Object} [opts={}] Options:
     * @param {Object} [opts.cache] Starting cache storage object. {@see TypeCache#constructor}
     * @param {Object} [opts.mapping] Decoration mapping. {@see TypeCache#decorate}
     * @returns {TypeCache} The new cache.
     */
    @createFor = (Type, typeKey, opts={}) ->
        cache = new TypeCache typeKey, opts.cache
        cache.decorate Type, opts.mapping
        cache
    


/**
 * @name SubtypeCacheMixin
 * @namespace Static methods for interacting with a TypeCache for this class hierarchy.
 */


