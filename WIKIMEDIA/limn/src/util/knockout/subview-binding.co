ko = require 'knockout'

subviewDomDataKey = '__ko_subviewBindingData'
/**
 * Custom binding that is used as follows:
 * `<section data-bind="subview: observableProperty"></section>`
 * And works as follows:
 *   In the example above, observableProperty is a ko.observable whose value is an object that has a `template` property
 *   The binding finds the template with id `observableProperty().template` and fills it as the innerHTML of the section element
 *   The binding then sets the context for the section's child elements as the observableProperty (like with: observableProperty)
 */
ko.bindingHandlers.subview = do
    init: (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) ->
        controlsDescendantBindings: true
    
    update: (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) ->
        unwrapped = ko.utils.unwrapObservable valueAccessor()
        if unwrapped?.template
            $(element).html $("##{unwrapped.template}").html()
            childContext = bindingContext.createChildContext unwrapped
            ko.applyBindingsToDescendants childContext, element
            
            if typeof unwrapped.afterRender is 'function'
                unwrapped.afterRender.call unwrapped, element
    
