_ = require '../underscore'

hasOwn = {}.hasOwnProperty

/**
 * Sentinel for missing values.
 */
MISSING = undefined

/**
 * Tombstone for deleted, non-passthrough keys.
 */
TOMBSTONE = {}


/**
 * @class A mapping of key-value pairs supporting lookup fallback across multiple objects.
 */
class exports.Cascade
    /**
     * Sentinel tombstone for deleted, non-passthrough keys.
     * @type TOMBSTONE
     * @readonly
     */
    @TOMBSTONE = TOMBSTONE
    
    
    /**
     * Map holding the object's KV-pairs; always the second element of the
     * cascade lookup.
     * @type Object
     * @private
     */
    _data : null
    
    /**
     * Map of tombstones, marking intentionally unset keys in the object's
     * KV-pairs; always the first element of the cascade lookup.
     * @type Object<String, TOMBSTONE>
     * @private
     */
    _tombstones : null
    
    /**
     * List of objects for lookups.
     * @type Array
     * @private
     */
    _lookups : null
    
    
    
    /**
     * @constructor
     */
    (data={}, lookups=[], tombstones={}) ->
        @_data       = data
        @_tombstones = tombstones
        @_lookups    = [@_data].concat lookups
    
    
    /**
     * @returns {Cascade} A shallow copy of the data and lookup chain.
     */
    clone: ->
        new Cascade do
            {} import @_data
            @_lookups.slice()
            {} import @_tombstones
    
    
    
    ### Data & Lookups ###
    
    getData: ->
        @_data
    
    setData: (data) ->
        @_data = @_lookups[0] = data
        this
    
    getTombstones: ->
        @_tombstones
    
    # setTombstones: (tombstones) ->
    #     @_tombstones = tombstones
    #     for k, v in _.collapseObject @_tombstones
    #         if v
    #             _.setNested @_tombstones, k, TOMBSTONE, {+ensure}
    #         else
    #             _.unsetNested @_tombstones, k
    #     this
    
    /**
     * @returns {Number} Number of lookup dictionaries.
     */
    size: ->
        @_lookups.length - 1
    
    /**
     * @returns {Array<Object>} The array of lookup dictionaries.
     */
    getLookups: ->
        @_lookups
    
    /**
     * Adds a new lookup dictionary to the chain.
     * @returns {this}
     */
    addLookup: (dict) ->
        return this unless dict?
        throw new Error "Lookup dictionary must be an object! dict=#dict" unless _.isObject dict
        @_lookups.push dict
        this
    
    /**
     * Removes a lookup dictionary from the chain (but will not remove the data object).
     * @returns {this}
     */
    removeLookup: (dict) ->
        _.remove @_lookups, dict if dict and dict is not @_data
        this
    
    /**
     * Pops the last dictionary off the lookup chain and returns it.
     * @returns {*} The last dictionary, or `undefined` if there are no additional lookups.
     */
    popLookup: ->
        return if @size() <= 1
        @_lookups.pop()
    
    /**
     * Shifts the first additional lookup dictionary off the chain and returns it.
     * @returns {*} The first dictionary, or `undefined` if there are no additional lookups.
     */
    shiftLookup: ->
        return if @size() <= 1
        @_lookups.splice(1, 1)[0]
    
    /**
     * Adds a lookup dictionary to the front of the chain, just after the Cascade's own data
     * object.
     * @returns {this}
     */
    unshiftLookup: (dict) ->
        return this unless dict?
        throw new Error "Lookup dictionary must be an object! dict=#dict" unless _.isObject dict
        @_lookups.splice 1, 0, dict
        this
    
    
    /**
     * @returns {Boolean} Whether there is a tombstone set for `key`.
     */
    hasTombstone: (key) ->
        o = @_tombstones
        for part of key.split('.')
            o = o[part]
            return true if o is TOMBSTONE
            return false unless o
        false
    
    /**
     * @returns {Boolean} Whether `key` belongs to this object (not inherited
     *  from the cascade).
     */
    isOwnProperty: (key) ->
        return true if @hasTombstone key
        meta = _.getNestedMeta(@_data, key)
        meta?.obj and hasOwn.call meta.obj, key
    
    /**
     * @returns {Boolean} Whether `key` belongs to this object (not inherited
     *  from the cascade) and is defined.
     */
    isOwnValue: (key) ->
        not @hasTombstone key
        and @isOwnProperty key
        and _.getNested(@_data, key, MISSING) is not MISSING
    
    /**
     * @returns {Boolean} Whether the value at `key` is the same as that
     *  inherited by from the cascade.
     */
    isInheritedValue: (key, strict=false) ->
        return false if @hasTombstone key
        val = @get key
        cVal = @_getInCascade key, MISSING, 2
        if strict
            val is cVal
        else
            _.isEqual val, cVal
    
    /**
     * @returns {Boolean} Whether the value at `key` is different from that
     *  inherited by from the cascade.
     */
    isModifiedValue: (key, strict=false) ->
        not @isInheritedValue key, strict
    
    
    
    ### Value Accessors ###
    
    /**
     * @private
     * @param {String} key Key to look up.
     * @param {*} [def=undefined] Value to return if lookup fails.
     * @param {Number} [idx=0] Index into lookup list to begin search.
     * @returns {*} First value for `key` found in the lookup chain starting at `idx`,
     *  and `def` otherwise.
     */
    _getInCascade : (key, def, idx=0) ->
        return def if @hasTombstone key
        
        lookups = if idx then @_lookups.slice(idx) else @_lookups
        for data of lookups
            val = _.getNested data, key, MISSING, {tombstone:TOMBSTONE}
            return def if val is TOMBSTONE
            return val unless val is MISSING
        def
    
    /**
     * @returns {Boolean} Whether there is a value at the given key.
     */
    has : (key) ->
        @get(key, MISSING) is not MISSING
    
    /**
     * @param {String} key Key to look up.
     * @param {*} [def=undefined] Value to return if lookup fails.
     * @returns {*} First value for `key` found in the lookup chain,
     *  and `def` otherwise.
     */
    get : (key, def) ->
        @_getInCascade key, def
    
    /**
     * Sets a key to a value, accepting nested keys and creating intermediary objects as necessary.
     * @public
     * @name set
     * @param {String} key Key to set.
     * @param {*} value Non-`undefined` value to set.
     * @returns {this}
     */
    /**
     * @public
     * @name set
     * @param {Object} values Map of key-value pairs to set. No value may be `undefined`.
     * @returns {this}
     */
    set : (values) ->
        # Handle @set(k, val)
        if arguments.length > 1 and typeof values is 'string'
            [key, val] = arguments
            throw new Error('Cannot set() an undefined key or value!') if not key or val is void
            values = { "#key": val }
        
        # Set and ensure the creation of missing intermediate objects.
        for key, val in values
            _.unsetNested @_tombstones, key, {+ensure}
            _.setNested @_data, key, val, {+ensure}
        
        this
    
    
    /**
     * Delete the given key from this object's data dictionary and set a tombstone
     * which ensures that future lookups do not cascade and thus see the key as
     * `undefined`.
     * 
     * If the key is missing from the data dictionary the delete does not cascade,
     * but the tombstone is still set.
     * 
     * @param {String} key Key to unset.
     * @returns {undefined|*} If found, returns the old value, and otherwise `undefined`.
     */
    unset: (key) ->
        old = @get key
        _.unsetNested @_data, key
        _.setNested @_tombstones, key, TOMBSTONE, {+ensure}
        old
    
    
    /**
     * Unsets the key in the data dictionary, but ensures future lookups also
     * see the key as `undefined`, as opposed.
     * 
     * @param {String} key Key to unset.
     * @returns {this} 
     */
    inherit: (key) ->
        _.unsetNested @_tombstones, key, {+ensure}
        _.unsetNested @_data, key
    
    
    
    ### Collection Methods ###
    
    /**
     * Updates the Cascade's data with all key-value pairs found in the supplied
     * objects in first-in-last-out order. No pair's value may be `undefined`, but
     * non-object arguments are skipped.
     * 
     * @param {Object} ...values Any number of objects containing key-value pairs.
     * @returns {this}
     */
    update: ->
        for o of arguments
            @set o if _.isObject o
        this
    
    /**
     * Recursively collapses the Cascade to a plain object by recursively merging the
     * lookups (in reverse order) into the data.
     * @returns {Object}
     */
    collapse: ->
        o = _.merge {}, ...@_lookups.slice(1).reverse()
        for k in @_tombstones
            delete o[k]
        _.merge o, @_data
    
    /**
     * Returns a plain object for JSON serialization via {@link Cascade#collapse()}.
     * The name of this method is a bit confusing, as it doesn't actually return a 
     * JSON string -- but I'm afraid that it's the way that the JavaScript API for 
     * `JSON.stringify()` works.
     * 
     * @see https://developer.mozilla.org/en/JSON#toJSON()_method
     * @return {Object} Plain object for JSON serialization.
     */
    toJSON: ->
        @collapse()
    
    # XXX: should unique? but then won't map 1:1 to @values()...
    keys: ->
        _.flatten _.map @_lookups, -> _.keys it
    
    values: ->
        _.flatten _.map @_lookups, -> _.values it
    
    reduce : (fn, acc, context=this) ->
        _.reduce @_lookups, fn, acc, context
    
    map : (fn, context=this) ->
        _.map @_lookups, fn, context
    
    filter: (fn, context=this) ->
        _.filter @_lookups, fn, context
    
    each : (fn, context=this) ->
        _.each @_lookups, fn, context
        this
    
    invoke : (name, ...args) ->
        _.invoke @_lookups, name, ...args
    
    pluck : (attr) ->
        _.pluck @_lookups, attr
    
    find: (fn, context=this) ->
        _.find @_lookups, fn, context
    
    
    
    toString: ->
        Cls = @constructor
        "#{Cls.displayName or Cls.name}()"


# Alias methods to alternate names
_.alias Cascade::,
    # src        : dest
    unset        : 'setTombstone'
    collapse     : 'toObject'
    each         : 'forEach'

