url       = require 'url'
minimatch = require 'minimatch'
request   = require 'request'


matchesList = (list, value) ->
    for pat of list
        return true if pat(value)
    false

ProxyMiddleware = (options={}) ->
    options = {whitelist, blacklist} = {-verbose, whitelist:[], blacklist:[], ...options}
    whitelist = [whitelist] unless Array.isArray whitelist
    whitelist .= map -> minimatch.filter it, {+nocase}
    blacklist = [blacklist] unless Array.isArray blacklist
    blacklist .= map -> minimatch.filter it, {+nocase}
    
    return (req, res) ->
        targetUrl = ( req.params.url or url.parse(req.url).pathname.slice(3) ).trim()
        return res.send {error:'URL required'}, 400 unless targetUrl
        
        targetUrl = "http://#targetUrl" unless /^https?:\/\//.test targetUrl
        target = url.parse targetUrl, true, true
        
        if matchesList blacklist, target.hostname
            return res.send {error:'Domain is blacklisted'}, 403
        unless matchesList whitelist, target.hostname
            return res.send {error:'Domain is not whitelisted'}, 403
        
        # Set the no-buffering flag for nginx
        res.header 'X-Accel-Buffering', 'no'
        
        console.log "[Proxy] #targetUrl" if options.verbose
        request.get targetUrl
            .on 'error', (ex) ->
                if ex.syscall is 'getaddrinfo'
                    error = 'Invalid or Unreachable URL'
                else
                    error = ex.message or ex.code
                res.send { error }, 502
            .pipe res


module.exports = exports = ProxyMiddleware
exports.ProxyMiddleware = ProxyMiddleware
