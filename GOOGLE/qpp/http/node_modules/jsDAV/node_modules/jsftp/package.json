{
  "name": "jsftp",
  "id": "jsftp",
  "version": "0.5.4",
  "description": "A sane FTP client implementation for NodeJS",
  "keywords": [
    "ftp",
    "protocol",
    "files",
    "server",
    "client",
    "async"
  ],
  "author": {
    "name": "Sergi Mansilla",
    "email": "sergi.mansilla@gmail.com",
    "url": "http://sergimansilla.com"
  },
  "homepage": "https://github.com/sergi/jsftp",
  "repository": {
    "type": "git",
    "url": "https://github.com/sergi/jsftp.git"
  },
  "bugs": {
    "url": "https://github.com/sergi/jsftp/issues"
  },
  "dependencies": {
    "streamer": "0.2.x"
  },
  "devDependencies": {
    "mocha": "~1.5.0"
  },
  "main": "./jsftp.js",
  "engines": {
    "node": ">=0.6.21"
  },
  "scripts": {
    "test": "mocha -R spec -t 5000"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/sergi/jsftp/blob/master/LICENSE"
    }
  ],
  "readme": "jsftp [![Build Status](https://secure.travis-ci.org/sergi/jsftp.png)](http://travis-ci.org/sergi/jsftp)\n=====\n\njsftp is a client FTP library for NodeJS that focuses on correctness, clarity and conciseness. It doesn't get in the middle of the user intentions.\n\njsftp gives the user access to all the raw commands of FTP in form of methods in the `Ftp` object. It also provides several convenience methods for actions that require complex chains of commands (e.g. uploading and retrieving files). When commands succeed they always pass the response of the server to the callback, in the form of an object that contains two properties: `code`, which is the response code of the FTP operation, and `text`, which is the complete text of the response.\n\nRaw (or native) commands are accessible in the form `Ftp.raw[\"desired_command\"](params, callback)`\n\nThus, a command like `QUIT` will be called like\n\n```javascript\nFtp.raw.quit(function(err, data) {\n    if (err)\n        return console.error(err);\n\n    console.log(\"Bye!\");\n});\n```\n\nand a command like `MKD`, which accepts parameters, will look like\n\n```javascript\nFtp.raw.mkd(\"/new_dir\", function(err, data) {\n    if (err)\n        return console.error(err);\n\n    console.log(data.text); // Presenting the FTP response text to the user\n});\n```\n\n\nUsage examples\n--------------\n\n```javascript\nvar Ftp = require(\"jsftp\");\n\nvar ftp = new Ftp({\n    host: \"myhost.com\",\n    user: \"johndoe\",\n    port: 3334, // Defaults to 21\n    pass: \"12345\"\n});\n\n\n// Retrieve a file in the remote server. When the file has been retrieved,\n// the callback will be called with `data` being the Buffer with the\n// contents of the file.\n\n// `ftp.get` is a convenience method. In this case, it hides the actual\n// complexity of setting up passive mode and retrieving files.\nftp.get(\"/folder/file.ext\", function(err, data) {\n    if (err)\n        return console.error(err);\n\n    // Do something with the buffer\n    doSomething(data);\n\n    // We can use raw FTP commands directly as well. In this case we use FTP\n    // 'QUIT' method, which accepts no parameters and returns the farewell\n    // message from the server\n    ftp.raw.quit(function(err, res) {\n        if (err)\n            return console.error(err);\n\n        console.log(\"FTP session finalized! See you soon!\");\n    });\n});\n\n// Create a directory\nftp.raw.mkd(\"/example_dir\", function(err, data) {\n    if (err)\n        return console.error(err);\n\n    console.log(data.text);\n});\n\n// Delete a directory\nftp.raw.rmd(\"/example_dir\", function(err, data) {\n    if (err)\n        return console.error(err);\n\n    console.log(data.text);\n});\n```\n\nYou can find more usage examples in the [unit tests](https://github.com/sergi/jsftp/blob/master/test/jsftp_test.js). This documentation\nwill grow as jsftp evolves.\n\n\nAPI\n---\n\n### Properties\n\n#### Ftp.host\n\nHost name for the current FTP server.\n\n#### Ftp.port\n\nPort number for the current FTP server (defaults to 21).\n\n#### Ftp.socket\n\nNodeJS socket for the current FTP server.\n\n#### Ftp.features\n\n`features` is an array of feature names for the current FTP server. It is\ngenerated when the user authenticates with the `auth` method.\n\n\n### Methods\n\n#### Ftp.raw.FTP_COMMAND([params], callback)\nAll the standard FTP commands are available under the `raw` namespace. These\ncommands might accept parameters or not, but they always accept a callback\nwith the signature `err, data`, in which `err` is the error response coming\nfrom the server (usually a 4xx or 5xx error code) and the data is an object\nthat contains two properties: `code` and `text`. `code` is an integer indicating\nthe response code of the response and `text` is the response string itself.\n\n#### Ftp.auth(username, password, callback)\nAuthenticates the user with the given username and password. If null or empty\nvalues are passed for those, `auth` will use anonymous credentials. `callback`\nwill be called with the response text in case of successful login or with an\nerror as a first parameter, in normal Node fashion.\n\n#### Ftp.list(filePath, callback)\nLists `filePath` contents using a passive connection.\n\n#### Ftp.get(filePath, callback)\nDownloads `filePath` from the server.\n\n#### Ftp.put(filePath, buffer, callback)\nUploads a file to `filePath`. It accepts a `buffer` parameter that will be\nwritten in the remote file.\n\n#### Ftp.rename(from, to, callback)\nRenames a file in the server. `from` and `to` are both filepaths.\n\n#### Ftp.ls(filePath, callback)\nLists information about files or directories and yields an array of file objects with parsed file properties to the callback. You should use this function instead of `stat` or `list` in case you need to do something with the individual file properties.\n\n#### Ftp.keepAlive()\nRefreshes the interval thats keep the server connection active. There is no\nneed to call this method since it is taken care internally\n\n\nInstallation\n------------\n\nWith NPM:\n\n    npm install jsftp\n\nFrom GitHub:\n\n    git clone https://github.com/sergi/jsftp.git\n\n\nTests\n-----\n\nTo run the tests:\n\n    npm test\n\nPlease note that for now the unit tests require python because the FTP server\nused is written in python.\n\n\nLicense\n-------\n\nSee LICENSE.\n",
  "_id": "jsftp@0.5.4",
  "dist": {
    "shasum": "755e05e23442b9a2b9f331f4e9dbd54c09996c79"
  },
  "_from": "jsftp@~0.5.4"
}
